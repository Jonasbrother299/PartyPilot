{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport invariant from 'invariant';\nimport { perPlatformTypes } from \"./fileTypes\";\nimport { NativeDocumentPicker } from \"./NativeDocumentPicker\";\nexport var types = perPlatformTypes[Platform.OS];\nexport function pickDirectory(_x) {\n  return _pickDirectory.apply(this, arguments);\n}\nfunction _pickDirectory() {\n  _pickDirectory = _asyncToGenerator(function* (params) {\n    if (Platform.OS === 'ios') {\n      var result = yield pick(_objectSpread(_objectSpread({}, params), {}, {\n        mode: 'open',\n        allowMultiSelection: false,\n        type: ['public.folder']\n      }));\n      return {\n        uri: result[0].uri\n      };\n    } else {\n      return NativeDocumentPicker.pickDirectory();\n    }\n  });\n  return _pickDirectory.apply(this, arguments);\n}\nexport function pickSingle(opts) {\n  var options = _objectSpread(_objectSpread({}, opts), {}, {\n    allowMultiSelection: false\n  });\n  return pick(options).then(function (results) {\n    return results[0];\n  });\n}\nexport function pick(opts) {\n  var options = _objectSpread({\n    allowMultiSelection: false,\n    type: [types.allFiles]\n  }, opts);\n  var newOpts = _objectSpread(_objectSpread({\n    presentationStyle: 'formSheet',\n    transitionStyle: 'coverVertical'\n  }, options), {}, {\n    type: Array.isArray(options.type) ? options.type : [options.type]\n  });\n  return doPick(newOpts);\n}\nfunction doPick(options) {\n  var _options$mode, _options$copyTo;\n  invariant(!('filetype' in options), 'A `filetype` option was passed to DocumentPicker.pick, the correct option is `type`');\n  invariant(!('types' in options), 'A `types` option was passed to DocumentPicker.pick, the correct option is `type`');\n  invariant(options.type.every(function (type) {\n    return typeof type === 'string';\n  }), `Unexpected type option in ${options.type}, did you try using a DocumentPicker.types.* that does not exist?`);\n  invariant(options.type.length > 0, '`type` option should not be an empty array, at least one type must be passed if the `type` option is not omitted');\n  invariant(!options.type.includes('folder'), 'RN document picker: \"folder\" option was removed, use \"pickDirectory()\"');\n  if ('mode' in options && !['import', 'open'].includes((_options$mode = options.mode) != null ? _options$mode : '')) {\n    throw new TypeError('Invalid mode option: ' + options.mode);\n  }\n  if ('copyTo' in options && !['cachesDirectory', 'documentDirectory'].includes((_options$copyTo = options.copyTo) != null ? _options$copyTo : '')) {\n    throw new TypeError('Invalid copyTo option: ' + options.copyTo);\n  }\n  return NativeDocumentPicker.pick(options);\n}\nexport function releaseSecureAccess(uris) {\n  if (Platform.OS !== 'ios') {\n    return Promise.resolve();\n  }\n  invariant(Array.isArray(uris) && uris.every(function (uri) {\n    return typeof uri === 'string';\n  }), `\"uris\" should be an array of strings, was ${uris}`);\n  return NativeDocumentPicker.releaseSecureAccess(uris);\n}\nvar E_DOCUMENT_PICKER_CANCELED = 'DOCUMENT_PICKER_CANCELED';\nvar E_DOCUMENT_PICKER_IN_PROGRESS = 'ASYNC_OP_IN_PROGRESS';\nexport function isCancel(err) {\n  return isErrorWithCode(err, E_DOCUMENT_PICKER_CANCELED);\n}\nexport function isInProgress(err) {\n  return isErrorWithCode(err, E_DOCUMENT_PICKER_IN_PROGRESS);\n}\nfunction isErrorWithCode(err, errorCode) {\n  if (err && typeof err === 'object' && 'code' in err) {\n    var nativeModuleErrorInstance = err;\n    return (nativeModuleErrorInstance === null || nativeModuleErrorInstance === void 0 ? void 0 : nativeModuleErrorInstance.code) === errorCode;\n  }\n  return false;\n}\nexport default {\n  isCancel: isCancel,\n  isInProgress: isInProgress,\n  releaseSecureAccess: releaseSecureAccess,\n  pickDirectory: pickDirectory,\n  pick: pick,\n  pickSingle: pickSingle,\n  types: types,\n  perPlatformTypes: perPlatformTypes\n};","map":{"version":3,"names":["invariant","perPlatformTypes","NativeDocumentPicker","types","Platform","OS","pickDirectory","_x","_pickDirectory","apply","arguments","_asyncToGenerator","params","result","pick","_objectSpread","mode","allowMultiSelection","type","uri","pickSingle","opts","options","then","results","allFiles","newOpts","presentationStyle","transitionStyle","Array","isArray","doPick","_options$mode","_options$copyTo","every","length","includes","TypeError","copyTo","releaseSecureAccess","uris","Promise","resolve","E_DOCUMENT_PICKER_CANCELED","E_DOCUMENT_PICKER_IN_PROGRESS","isCancel","err","isErrorWithCode","isInProgress","errorCode","nativeModuleErrorInstance","code"],"sources":["D:\\Moco\\PartyPilot\\node_modules\\react-native-document-picker\\src\\index.tsx"],"sourcesContent":["import { Platform, ModalPropsIOS } from 'react-native'\nimport invariant from 'invariant'\nimport type { PlatformTypes, SupportedPlatforms } from './fileTypes'\nimport { perPlatformTypes } from './fileTypes'\nimport { NativeDocumentPicker } from './NativeDocumentPicker'\n\nexport type DocumentPickerResponse = {\n  uri: string\n  name: string | null\n  copyError?: string\n  fileCopyUri: string | null\n  type: string | null\n  size: number | null\n}\n\nexport const types = perPlatformTypes[Platform.OS]\n\nexport type DirectoryPickerResponse = {\n  uri: string\n}\n\nexport type TransitionStyle = 'coverVertical' | 'flipHorizontal' | 'crossDissolve' | 'partialCurl'\n\nexport type DocumentPickerOptions<OS extends SupportedPlatforms> = {\n  type?:\n    | string\n    | PlatformTypes[OS][keyof PlatformTypes[OS]]\n    | Array<PlatformTypes[OS][keyof PlatformTypes[OS]] | string>\n  mode?: 'import' | 'open'\n  copyTo?: 'cachesDirectory' | 'documentDirectory'\n  allowMultiSelection?: boolean\n  transitionStyle?: TransitionStyle\n} & Pick<ModalPropsIOS, 'presentationStyle'>\n\nexport async function pickDirectory<OS extends SupportedPlatforms>(\n  params?: Pick<DocumentPickerOptions<OS>, 'presentationStyle' | 'transitionStyle'>,\n): Promise<DirectoryPickerResponse | null> {\n  if (Platform.OS === 'ios') {\n    const result = await pick({\n      ...params,\n      mode: 'open',\n      allowMultiSelection: false,\n      type: ['public.folder'],\n    })\n    return { uri: result[0].uri }\n  } else {\n    return NativeDocumentPicker.pickDirectory()\n  }\n}\n\nexport function pickSingle<OS extends SupportedPlatforms>(\n  opts?: DocumentPickerOptions<OS>,\n): Promise<DocumentPickerResponse> {\n  const options = {\n    ...opts,\n    allowMultiSelection: false,\n  }\n  return pick(options).then((results) => results[0])\n}\n\nexport function pick<OS extends SupportedPlatforms>(\n  opts?: DocumentPickerOptions<OS>,\n): Promise<DocumentPickerResponse[]> {\n  const options = {\n    // must be false to maintain old (v5) behavior\n    allowMultiSelection: false,\n    type: [types.allFiles],\n    ...opts,\n  }\n\n  const newOpts: DoPickParams<OS> = {\n    presentationStyle: 'formSheet',\n    transitionStyle: 'coverVertical',\n    ...options,\n    type: Array.isArray(options.type) ? options.type : [options.type],\n  }\n\n  return doPick(newOpts)\n}\n\ntype DoPickParams<OS extends SupportedPlatforms> = DocumentPickerOptions<OS> & {\n  type: Array<PlatformTypes[OS][keyof PlatformTypes[OS]] | string>\n  allowMultiSelection: boolean\n  presentationStyle: NonNullable<ModalPropsIOS['presentationStyle']>\n  transitionStyle: TransitionStyle\n}\n\nfunction doPick<OS extends SupportedPlatforms>(\n  options: DoPickParams<OS>,\n): Promise<DocumentPickerResponse[]> {\n  invariant(\n    !('filetype' in options),\n    'A `filetype` option was passed to DocumentPicker.pick, the correct option is `type`',\n  )\n  invariant(\n    !('types' in options),\n    'A `types` option was passed to DocumentPicker.pick, the correct option is `type`',\n  )\n\n  invariant(\n    options.type.every((type: unknown) => typeof type === 'string'),\n    `Unexpected type option in ${options.type}, did you try using a DocumentPicker.types.* that does not exist?`,\n  )\n  invariant(\n    options.type.length > 0,\n    '`type` option should not be an empty array, at least one type must be passed if the `type` option is not omitted',\n  )\n\n  invariant(\n    !options.type.includes('folder'),\n    'RN document picker: \"folder\" option was removed, use \"pickDirectory()\"',\n  )\n\n  if ('mode' in options && !['import', 'open'].includes(options.mode ?? '')) {\n    throw new TypeError('Invalid mode option: ' + options.mode)\n  }\n\n  if (\n    'copyTo' in options &&\n    !['cachesDirectory', 'documentDirectory'].includes(options.copyTo ?? '')\n  ) {\n    throw new TypeError('Invalid copyTo option: ' + options.copyTo)\n  }\n\n  return NativeDocumentPicker.pick(options)\n}\n\nexport function releaseSecureAccess(uris: Array<string>): Promise<void> {\n  if (Platform.OS !== 'ios') {\n    return Promise.resolve()\n  }\n\n  invariant(\n    Array.isArray(uris) && uris.every((uri) => typeof uri === 'string'),\n    `\"uris\" should be an array of strings, was ${uris}`,\n  )\n\n  return NativeDocumentPicker.releaseSecureAccess(uris)\n}\n\nconst E_DOCUMENT_PICKER_CANCELED = 'DOCUMENT_PICKER_CANCELED'\nconst E_DOCUMENT_PICKER_IN_PROGRESS = 'ASYNC_OP_IN_PROGRESS'\n\nexport type NativeModuleErrorShape = Error & { code?: string }\n\nexport function isCancel(err: unknown): boolean {\n  return isErrorWithCode(err, E_DOCUMENT_PICKER_CANCELED)\n}\n\nexport function isInProgress(err: unknown): boolean {\n  return isErrorWithCode(err, E_DOCUMENT_PICKER_IN_PROGRESS)\n}\n\nfunction isErrorWithCode(err: unknown, errorCode: string): boolean {\n  if (err && typeof err === 'object' && 'code' in err) {\n    const nativeModuleErrorInstance = err as NativeModuleErrorShape\n    return nativeModuleErrorInstance?.code === errorCode\n  }\n  return false\n}\n\nexport default {\n  isCancel,\n  isInProgress,\n  releaseSecureAccess,\n  pickDirectory,\n  pick,\n  pickSingle,\n  types,\n  perPlatformTypes,\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}