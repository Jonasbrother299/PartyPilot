{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { useState } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport Alert from \"react-native-web/dist/exports/Alert\";\nimport Avatar from \"../../path-to-your-Avatar-component\";\nimport { COLORS } from \"../../constants\";\nimport DocumentPicker, { isCancel, isInProgress, types } from 'react-native-document-picker';\nimport { supabase } from \"../../config/supabaseConfig\";\nimport { useEffect } from 'react';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nexport default function ProfilePicture() {\n  var _useState = useState(null),\n    _useState2 = _slicedToArray(_useState, 2),\n    avatarUrl = _useState2[0],\n    setAvatarUrl = _useState2[1];\n  var _useState3 = useState(false),\n    _useState4 = _slicedToArray(_useState3, 2),\n    uploading = _useState4[0],\n    setUploading = _useState4[1];\n  useEffect(function () {}, []);\n  function downloadImage(_x) {\n    return _downloadImage.apply(this, arguments);\n  }\n  function _downloadImage() {\n    _downloadImage = _asyncToGenerator(function* (path) {\n      try {\n        var _yield$supabase$stora = yield supabase.storage.from('avatars').download(path),\n          data = _yield$supabase$stora.data,\n          error = _yield$supabase$stora.error;\n        if (error) {\n          throw error;\n        }\n        var fr = new FileReader();\n        fr.readAsDataURL(data);\n        fr.onload = function () {\n          setAvatarUrl(fr.result);\n        };\n      } catch (error) {\n        if (error instanceof Error) {\n          console.log('Error downloading image: ', error.message);\n        }\n      }\n    });\n    return _downloadImage.apply(this, arguments);\n  }\n  function uploadAvatar() {\n    return _uploadAvatar.apply(this, arguments);\n  }\n  function _uploadAvatar() {\n    _uploadAvatar = _asyncToGenerator(function* () {\n      try {\n        setUploading(true);\n        var file = yield DocumentPicker.pickSingle({\n          presentationStyle: 'fullScreen',\n          copyTo: 'cachesDirectory',\n          type: types.images,\n          mode: 'open'\n        });\n        var photo = {\n          uri: file.fileCopyUri,\n          type: file.type,\n          name: file.name\n        };\n        var formData = new FormData();\n        formData.append('file', photo);\n        var fileExt = file.name.split('.').pop();\n        var filePath = `${Math.random()}.${fileExt}`;\n        var _yield$supabase$stora2 = yield supabase.storage.from('avatars').upload(filePath, formData),\n          error = _yield$supabase$stora2.error;\n        if (error) {\n          throw error;\n        }\n        onUpload(filePath);\n      } catch (error) {\n        if (isCancel(error)) {\n          console.warn('cancelled');\n        } else if (isInProgress(error)) {\n          console.warn('multiple pickers were opened, only the last will be considered');\n        } else if (error instanceof Error) {\n          Alert.alert(error.message);\n        } else {\n          throw error;\n        }\n      } finally {\n        setUploading(false);\n      }\n    });\n    return _uploadAvatar.apply(this, arguments);\n  }\n  return _jsxs(View, {\n    style: styles.container,\n    children: [_jsx(Avatar, {\n      url: avatarUrl,\n      onUpload: uploadAvatar,\n      size: 200\n    }), _jsx(View, {\n      children: _jsx(Button, {\n        title: uploading ? 'Uploading ...' : 'Upload',\n        onPress: uploadAvatar,\n        disabled: uploading\n      })\n    })]\n  });\n}\nvar styles = StyleSheet.create({\n  container: {\n    alignItems: 'center'\n  }\n});","map":{"version":3,"names":["React","useState","View","StyleSheet","Button","Image","Alert","Avatar","COLORS","DocumentPicker","isCancel","isInProgress","types","supabase","useEffect","jsx","_jsx","jsxs","_jsxs","ProfilePicture","_useState","_useState2","_slicedToArray","avatarUrl","setAvatarUrl","_useState3","_useState4","uploading","setUploading","downloadImage","_x","_downloadImage","apply","arguments","_asyncToGenerator","path","_yield$supabase$stora","storage","from","download","data","error","fr","FileReader","readAsDataURL","onload","result","Error","console","log","message","uploadAvatar","_uploadAvatar","file","pickSingle","presentationStyle","copyTo","type","images","mode","photo","uri","fileCopyUri","name","formData","FormData","append","fileExt","split","pop","filePath","Math","random","_yield$supabase$stora2","upload","onUpload","warn","alert","style","styles","container","children","url","size","title","onPress","disabled","create","alignItems"],"sources":["D:/Moco/PartyPilot/src/components/ProfileImage/ProfileImage.jsx"],"sourcesContent":["import React, { useState } from 'react';\r\nimport { View, StyleSheet, Button, Image, Alert } from 'react-native';\r\nimport Avatar from '../../path-to-your-Avatar-component'; // Adjust the import path\r\nimport { COLORS } from '../../constants';\r\nimport DocumentPicker, { isCancel, isInProgress, types } from 'react-native-document-picker';\r\nimport { supabase } from '../../config/supabaseConfig'; // Adjust the import path for supabase\r\nimport { useEffect } from 'react';\r\n\r\nexport default function ProfilePicture() {\r\n  const [avatarUrl, setAvatarUrl] = useState(null);\r\n  const [uploading, setUploading] = useState(false);\r\n\r\n  useEffect(() => {\r\n    // If you have an initial profile picture, you can call downloadImage here\r\n    // downloadImage('path_to_initial_image'); \r\n  }, []);\r\n\r\n  async function downloadImage(path) {\r\n    try {\r\n      const { data, error } = await supabase.storage.from('avatars').download(path);\r\n\r\n      if (error) {\r\n        throw error;\r\n      }\r\n\r\n      const fr = new FileReader();\r\n      fr.readAsDataURL(data);\r\n      fr.onload = () => {\r\n        setAvatarUrl(fr.result);\r\n      };\r\n    } catch (error) {\r\n      if (error instanceof Error) {\r\n        console.log('Error downloading image: ', error.message);\r\n      }\r\n    }\r\n  }\r\n\r\n  async function uploadAvatar() {\r\n    try {\r\n      setUploading(true);\r\n\r\n      const file = await DocumentPicker.pickSingle({\r\n        presentationStyle: 'fullScreen',\r\n        copyTo: 'cachesDirectory',\r\n        type: types.images,\r\n        mode: 'open',\r\n      });\r\n\r\n      const photo = {\r\n        uri: file.fileCopyUri,\r\n        type: file.type,\r\n        name: file.name,\r\n      };\r\n\r\n      const formData = new FormData();\r\n      formData.append('file', photo);\r\n\r\n      const fileExt = file.name.split('.').pop();\r\n      const filePath = `${Math.random()}.${fileExt}`;\r\n\r\n      const { error } = await supabase.storage.from('avatars').upload(filePath, formData);\r\n\r\n      if (error) {\r\n        throw error;\r\n      }\r\n\r\n      onUpload(filePath);\r\n      // Once the avatar is uploaded, you can also call downloadImage to update the avatarUrl\r\n      // downloadImage(filePath);\r\n    } catch (error) {\r\n      if (isCancel(error)) {\r\n        console.warn('cancelled');\r\n        // User cancelled the picker, exit any dialogs or menus and move on\r\n      } else if (isInProgress(error)) {\r\n        console.warn('multiple pickers were opened, only the last will be considered');\r\n      } else if (error instanceof Error) {\r\n        Alert.alert(error.message);\r\n      } else {\r\n        throw error;\r\n      }\r\n    } finally {\r\n      setUploading(false);\r\n    }\r\n  }\r\n\r\n  return (\r\n    <View style={styles.container}>\r\n      <Avatar url={avatarUrl} onUpload={uploadAvatar} size={200} />\r\n      <View>\r\n        <Button\r\n          title={uploading ? 'Uploading ...' : 'Upload'}\r\n          onPress={uploadAvatar}\r\n          disabled={uploading}\r\n        />\r\n      </View>\r\n    </View>\r\n  );\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n  container: {\r\n    alignItems: 'center',\r\n  },\r\n});"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}