{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = createHandler;\nvar _toConsumableArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/toConsumableArray\"));\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\nvar _assertThisInitialized2 = _interopRequireDefault(require(\"@babel/runtime/helpers/assertThisInitialized\"));\nvar _inherits2 = _interopRequireDefault(require(\"@babel/runtime/helpers/inherits\"));\nvar _possibleConstructorReturn2 = _interopRequireDefault(require(\"@babel/runtime/helpers/possibleConstructorReturn\"));\nvar _getPrototypeOf2 = _interopRequireDefault(require(\"@babel/runtime/helpers/getPrototypeOf\"));\nvar _defineProperty3 = _interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));\nvar React = _interopRequireWildcard(require(\"react\"));\nvar _Platform = _interopRequireDefault(require(\"react-native-web/dist/exports/Platform\"));\nvar _UIManager = _interopRequireDefault(require(\"react-native-web/dist/exports/UIManager\"));\nvar _DeviceEventEmitter = _interopRequireDefault(require(\"react-native-web/dist/exports/DeviceEventEmitter\"));\nvar _isEqual = _interopRequireDefault(require(\"lodash/isEqual\"));\nvar _RNGestureHandlerModule = _interopRequireDefault(require(\"../RNGestureHandlerModule\"));\nvar _State = require(\"../State\");\nvar _handlersRegistry = require(\"./handlersRegistry\");\nvar _gestureHandlerCommon = require(\"./gestureHandlerCommon\");\nvar _utils = require(\"../utils\");\nvar _ActionType = require(\"../ActionType\");\nvar _PressabilityDebugView = require(\"./PressabilityDebugView\");\nvar _GestureHandlerRootViewContext = _interopRequireDefault(require(\"../GestureHandlerRootViewContext\"));\nfunction _getRequireWildcardCache(e) { if (\"function\" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }\nfunction _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || \"object\" != typeof e && \"function\" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if (\"default\" !== u && Object.prototype.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\nvar _UIManagerAny$getView, _UIManagerAny$getView2, _UIManagerAny$getCons;\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}\nvar UIManagerAny = _UIManager.default;\nvar customGHEventsConfigFabricAndroid = {\n  topOnGestureHandlerEvent: {\n    registrationName: 'onGestureHandlerEvent'\n  },\n  topOnGestureHandlerStateChange: {\n    registrationName: 'onGestureHandlerStateChange'\n  }\n};\nvar customGHEventsConfig = Object.assign({\n  onGestureHandlerEvent: {\n    registrationName: 'onGestureHandlerEvent'\n  },\n  onGestureHandlerStateChange: {\n    registrationName: 'onGestureHandlerStateChange'\n  }\n}, (0, _utils.isFabric)() && _Platform.default.OS === 'android' && customGHEventsConfigFabricAndroid);\nUIManagerAny.genericDirectEventTypes = Object.assign({}, UIManagerAny.genericDirectEventTypes, customGHEventsConfig);\nvar UIManagerConstants = (_UIManagerAny$getView = (_UIManagerAny$getView2 = UIManagerAny.getViewManagerConfig) === null || _UIManagerAny$getView2 === void 0 ? void 0 : _UIManagerAny$getView2.call(UIManagerAny, 'getConstants')) !== null && _UIManagerAny$getView !== void 0 ? _UIManagerAny$getView : (_UIManagerAny$getCons = UIManagerAny.getConstants) === null || _UIManagerAny$getCons === void 0 ? void 0 : _UIManagerAny$getCons.call(UIManagerAny);\nif (UIManagerConstants) {\n  UIManagerConstants.genericDirectEventTypes = Object.assign({}, UIManagerConstants.genericDirectEventTypes, customGHEventsConfig);\n}\nvar _UIManagerAny$setJSRe = UIManagerAny.setJSResponder,\n  oldSetJSResponder = _UIManagerAny$setJSRe === void 0 ? function () {} : _UIManagerAny$setJSRe,\n  _UIManagerAny$clearJS = UIManagerAny.clearJSResponder,\n  oldClearJSResponder = _UIManagerAny$clearJS === void 0 ? function () {} : _UIManagerAny$clearJS;\nUIManagerAny.setJSResponder = function (tag, blockNativeResponder) {\n  _RNGestureHandlerModule.default.handleSetJSResponder(tag, blockNativeResponder);\n  oldSetJSResponder(tag, blockNativeResponder);\n};\nUIManagerAny.clearJSResponder = function () {\n  _RNGestureHandlerModule.default.handleClearJSResponder();\n  oldClearJSResponder();\n};\nvar allowTouches = true;\nvar DEV_ON_ANDROID = __DEV__ && _Platform.default.OS === 'android';\nif (DEV_ON_ANDROID) {\n  _DeviceEventEmitter.default.addListener('toggleElementInspector', function () {\n    allowTouches = !allowTouches;\n  });\n}\nfunction hasUnresolvedRefs(props) {\n  var extract = function extract(refs) {\n    if (!Array.isArray(refs)) {\n      return refs && refs.current === null;\n    }\n    return refs.some(function (r) {\n      return r && r.current === null;\n    });\n  };\n  return extract(props['simultaneousHandlers']) || extract(props['waitFor']);\n}\nvar stateToPropMappings = (0, _defineProperty3.default)((0, _defineProperty3.default)((0, _defineProperty3.default)((0, _defineProperty3.default)((0, _defineProperty3.default)((0, _defineProperty3.default)({}, _State.State.UNDETERMINED, undefined), _State.State.BEGAN, 'onBegan'), _State.State.FAILED, 'onFailed'), _State.State.CANCELLED, 'onCancelled'), _State.State.ACTIVE, 'onActivated'), _State.State.END, 'onEnded');\nvar UNRESOLVED_REFS_RETRY_LIMIT = 1;\nfunction createHandler(_ref) {\n  var name = _ref.name,\n    _ref$allowedProps = _ref.allowedProps,\n    allowedProps = _ref$allowedProps === void 0 ? [] : _ref$allowedProps,\n    _ref$config = _ref.config,\n    config = _ref$config === void 0 ? {} : _ref$config,\n    transformProps = _ref.transformProps,\n    _ref$customNativeProp = _ref.customNativeProps,\n    customNativeProps = _ref$customNativeProp === void 0 ? [] : _ref$customNativeProp;\n  var Handler = function (_React$Component) {\n    (0, _inherits2.default)(Handler, _React$Component);\n    var _super = _createSuper(Handler);\n    function Handler(props) {\n      var _this;\n      (0, _classCallCheck2.default)(this, Handler);\n      _this = _super.call(this, props);\n      _defineProperty((0, _assertThisInitialized2.default)(_this), \"handlerTag\", void 0);\n      _defineProperty((0, _assertThisInitialized2.default)(_this), \"config\", void 0);\n      _defineProperty((0, _assertThisInitialized2.default)(_this), \"propsRef\", void 0);\n      _defineProperty((0, _assertThisInitialized2.default)(_this), \"isMountedRef\", void 0);\n      _defineProperty((0, _assertThisInitialized2.default)(_this), \"viewNode\", void 0);\n      _defineProperty((0, _assertThisInitialized2.default)(_this), \"viewTag\", void 0);\n      _defineProperty((0, _assertThisInitialized2.default)(_this), \"inspectorToggleListener\", void 0);\n      _defineProperty((0, _assertThisInitialized2.default)(_this), \"onGestureHandlerEvent\", function (event) {\n        if (event.nativeEvent.handlerTag === _this.handlerTag) {\n          if (typeof _this.props.onGestureEvent === 'function') {\n            var _this$props$onGesture, _this$props;\n            (_this$props$onGesture = (_this$props = _this.props).onGestureEvent) === null || _this$props$onGesture === void 0 ? void 0 : _this$props$onGesture.call(_this$props, event);\n          }\n        } else {\n          var _this$props$onGesture2, _this$props2;\n          (_this$props$onGesture2 = (_this$props2 = _this.props).onGestureHandlerEvent) === null || _this$props$onGesture2 === void 0 ? void 0 : _this$props$onGesture2.call(_this$props2, event);\n        }\n      });\n      _defineProperty((0, _assertThisInitialized2.default)(_this), \"onGestureHandlerStateChange\", function (event) {\n        if (event.nativeEvent.handlerTag === _this.handlerTag) {\n          if (typeof _this.props.onHandlerStateChange === 'function') {\n            var _this$props$onHandler, _this$props3;\n            (_this$props$onHandler = (_this$props3 = _this.props).onHandlerStateChange) === null || _this$props$onHandler === void 0 ? void 0 : _this$props$onHandler.call(_this$props3, event);\n          }\n          var state = event.nativeEvent.state;\n          var stateEventName = stateToPropMappings[state];\n          var eventHandler = stateEventName && _this.props[stateEventName];\n          if (eventHandler && typeof eventHandler === 'function') {\n            eventHandler(event);\n          }\n        } else {\n          var _this$props$onGesture3, _this$props4;\n          (_this$props$onGesture3 = (_this$props4 = _this.props).onGestureHandlerStateChange) === null || _this$props$onGesture3 === void 0 ? void 0 : _this$props$onGesture3.call(_this$props4, event);\n        }\n      });\n      _defineProperty((0, _assertThisInitialized2.default)(_this), \"refHandler\", function (node) {\n        _this.viewNode = node;\n        var child = React.Children.only(_this.props.children);\n        var ref = child.ref;\n        if (ref !== null) {\n          if (typeof ref === 'function') {\n            ref(node);\n          } else {\n            ref.current = node;\n          }\n        }\n      });\n      _defineProperty((0, _assertThisInitialized2.default)(_this), \"createGestureHandler\", function (newConfig) {\n        _this.config = newConfig;\n        _RNGestureHandlerModule.default.createGestureHandler(name, _this.handlerTag, newConfig);\n      });\n      _defineProperty((0, _assertThisInitialized2.default)(_this), \"attachGestureHandler\", function (newViewTag) {\n        _this.viewTag = newViewTag;\n        if (_Platform.default.OS === 'web') {\n          _RNGestureHandlerModule.default.attachGestureHandler(_this.handlerTag, newViewTag, _ActionType.ActionType.JS_FUNCTION_OLD_API, _this.propsRef);\n        } else {\n          (0, _handlersRegistry.registerOldGestureHandler)(_this.handlerTag, {\n            onGestureEvent: _this.onGestureHandlerEvent,\n            onGestureStateChange: _this.onGestureHandlerStateChange\n          });\n          var actionType = function () {\n            var _this$props5, _this$props6;\n            if ((_this$props5 = _this.props) !== null && _this$props5 !== void 0 && _this$props5.onGestureEvent && 'current' in _this.props.onGestureEvent) {\n              return _ActionType.ActionType.REANIMATED_WORKLET;\n            } else if ((_this$props6 = _this.props) !== null && _this$props6 !== void 0 && _this$props6.onGestureEvent && '__isNative' in _this.props.onGestureEvent) {\n              return _ActionType.ActionType.NATIVE_ANIMATED_EVENT;\n            } else {\n              return _ActionType.ActionType.JS_FUNCTION_OLD_API;\n            }\n          }();\n          _RNGestureHandlerModule.default.attachGestureHandler(_this.handlerTag, newViewTag, actionType);\n        }\n        (0, _gestureHandlerCommon.scheduleFlushOperations)();\n      });\n      _defineProperty((0, _assertThisInitialized2.default)(_this), \"updateGestureHandler\", function (newConfig) {\n        _this.config = newConfig;\n        _RNGestureHandlerModule.default.updateGestureHandler(_this.handlerTag, newConfig);\n        (0, _gestureHandlerCommon.scheduleFlushOperations)();\n      });\n      _this.handlerTag = (0, _handlersRegistry.getNextHandlerTag)();\n      _this.config = {};\n      _this.propsRef = React.createRef();\n      _this.isMountedRef = React.createRef();\n      _this.state = {\n        allowTouches: allowTouches\n      };\n      if (props.id) {\n        if (_handlersRegistry.handlerIDToTag[props.id] !== undefined) {\n          throw new Error(`Handler with ID \"${props.id}\" already registered`);\n        }\n        _handlersRegistry.handlerIDToTag[props.id] = _this.handlerTag;\n      }\n      return _this;\n    }\n    (0, _createClass2.default)(Handler, [{\n      key: \"componentDidMount\",\n      value: function componentDidMount() {\n        var _this2 = this;\n        var props = this.props;\n        this.isMountedRef.current = true;\n        if (DEV_ON_ANDROID) {\n          this.inspectorToggleListener = _DeviceEventEmitter.default.addListener('toggleElementInspector', function () {\n            _this2.setState(function (_) {\n              return {\n                allowTouches: allowTouches\n              };\n            });\n            _this2.update(UNRESOLVED_REFS_RETRY_LIMIT);\n          });\n        }\n        if (hasUnresolvedRefs(props)) {\n          queueMicrotask(function () {\n            _this2.update(UNRESOLVED_REFS_RETRY_LIMIT);\n          });\n        }\n        this.createGestureHandler((0, _gestureHandlerCommon.filterConfig)(transformProps ? transformProps(this.props) : this.props, [].concat((0, _toConsumableArray2.default)(allowedProps), (0, _toConsumableArray2.default)(customNativeProps)), config));\n        this.attachGestureHandler((0, _gestureHandlerCommon.findNodeHandle)(this.viewNode));\n      }\n    }, {\n      key: \"componentDidUpdate\",\n      value: function componentDidUpdate() {\n        var viewTag = (0, _gestureHandlerCommon.findNodeHandle)(this.viewNode);\n        if (this.viewTag !== viewTag) {\n          this.attachGestureHandler(viewTag);\n        }\n        this.update(UNRESOLVED_REFS_RETRY_LIMIT);\n      }\n    }, {\n      key: \"componentWillUnmount\",\n      value: function componentWillUnmount() {\n        var _this$inspectorToggle;\n        (_this$inspectorToggle = this.inspectorToggleListener) === null || _this$inspectorToggle === void 0 ? void 0 : _this$inspectorToggle.remove();\n        this.isMountedRef.current = false;\n        _RNGestureHandlerModule.default.dropGestureHandler(this.handlerTag);\n        (0, _gestureHandlerCommon.scheduleFlushOperations)();\n        var handlerID = this.props.id;\n        if (handlerID) {\n          delete _handlersRegistry.handlerIDToTag[handlerID];\n        }\n      }\n    }, {\n      key: \"update\",\n      value: function update(remainingTries) {\n        var _this3 = this;\n        if (!this.isMountedRef.current) {\n          return;\n        }\n        var props = this.props;\n        if (hasUnresolvedRefs(props) && remainingTries > 0) {\n          queueMicrotask(function () {\n            _this3.update(remainingTries - 1);\n          });\n        } else {\n          var newConfig = (0, _gestureHandlerCommon.filterConfig)(transformProps ? transformProps(this.props) : this.props, [].concat((0, _toConsumableArray2.default)(allowedProps), (0, _toConsumableArray2.default)(customNativeProps)), config);\n          if (!(0, _isEqual.default)(this.config, newConfig)) {\n            this.updateGestureHandler(newConfig);\n          }\n        }\n      }\n    }, {\n      key: \"setNativeProps\",\n      value: function setNativeProps(updates) {\n        var mergedProps = Object.assign({}, this.props, updates);\n        var newConfig = (0, _gestureHandlerCommon.filterConfig)(transformProps ? transformProps(mergedProps) : mergedProps, [].concat((0, _toConsumableArray2.default)(allowedProps), (0, _toConsumableArray2.default)(customNativeProps)), config);\n        this.updateGestureHandler(newConfig);\n      }\n    }, {\n      key: \"render\",\n      value: function render() {\n        var _this$props$testID;\n        if (__DEV__ && !this.context && !(0, _utils.isJestEnv)() && _Platform.default.OS !== 'web') {\n          throw new Error(name + ' must be used as a descendant of GestureHandlerRootView. Otherwise the gestures will not be recognized. See https://docs.swmansion.com/react-native-gesture-handler/docs/installation for more details.');\n        }\n        var gestureEventHandler = this.onGestureHandlerEvent;\n        var _this$props7 = this.props,\n          onGestureEvent = _this$props7.onGestureEvent,\n          onGestureHandlerEvent = _this$props7.onGestureHandlerEvent;\n        if (onGestureEvent && typeof onGestureEvent !== 'function') {\n          if (onGestureHandlerEvent) {\n            throw new Error('Nesting touch handlers with native animated driver is not supported yet');\n          }\n          gestureEventHandler = onGestureEvent;\n        } else {\n          if (onGestureHandlerEvent && typeof onGestureHandlerEvent !== 'function') {\n            throw new Error('Nesting touch handlers with native animated driver is not supported yet');\n          }\n        }\n        var gestureStateEventHandler = this.onGestureHandlerStateChange;\n        var _this$props8 = this.props,\n          onHandlerStateChange = _this$props8.onHandlerStateChange,\n          onGestureHandlerStateChange = _this$props8.onGestureHandlerStateChange;\n        if (onHandlerStateChange && typeof onHandlerStateChange !== 'function') {\n          if (onGestureHandlerStateChange) {\n            throw new Error('Nesting touch handlers with native animated driver is not supported yet');\n          }\n          gestureStateEventHandler = onHandlerStateChange;\n        } else {\n          if (onGestureHandlerStateChange && typeof onGestureHandlerStateChange !== 'function') {\n            throw new Error('Nesting touch handlers with native animated driver is not supported yet');\n          }\n        }\n        var events = {\n          onGestureHandlerEvent: this.state.allowTouches ? gestureEventHandler : undefined,\n          onGestureHandlerStateChange: this.state.allowTouches ? gestureStateEventHandler : undefined\n        };\n        this.propsRef.current = events;\n        var child = null;\n        try {\n          child = React.Children.only(this.props.children);\n        } catch (e) {\n          throw new Error((0, _utils.tagMessage)(`${name} got more than one view as a child. If you want the gesture to work on multiple views, wrap them with a common parent and attach the gesture to that view.`));\n        }\n        var grandChildren = child.props.children;\n        if (__DEV__ && child.type && (child.type === 'RNGestureHandlerButton' || child.type.name === 'View' || child.type.displayName === 'View')) {\n          grandChildren = React.Children.toArray(grandChildren);\n          grandChildren.push(React.createElement(_PressabilityDebugView.PressabilityDebugView, {\n            key: \"pressabilityDebugView\",\n            color: \"mediumspringgreen\",\n            hitSlop: child.props.hitSlop\n          }));\n        }\n        return React.cloneElement(child, Object.assign({\n          ref: this.refHandler,\n          collapsable: false\n        }, (0, _utils.isJestEnv)() ? {\n          handlerType: name,\n          handlerTag: this.handlerTag\n        } : {}, {\n          testID: (_this$props$testID = this.props.testID) !== null && _this$props$testID !== void 0 ? _this$props$testID : child.props.testID\n        }, events), grandChildren);\n      }\n    }]);\n    return Handler;\n  }(React.Component);\n  _defineProperty(Handler, \"displayName\", name);\n  _defineProperty(Handler, \"contextType\", _GestureHandlerRootViewContext.default);\n  return Handler;\n}","map":{"version":3,"names":["React","_interopRequireWildcard","require","_Platform","_interopRequireDefault","_UIManager","_DeviceEventEmitter","_isEqual","_RNGestureHandlerModule","_State","_handlersRegistry","_gestureHandlerCommon","_utils","_ActionType","_PressabilityDebugView","_GestureHandlerRootViewContext","_getRequireWildcardCache","e","WeakMap","r","t","__esModule","default","has","get","n","__proto__","a","Object","defineProperty","getOwnPropertyDescriptor","u","prototype","hasOwnProperty","call","i","set","_createSuper","Derived","hasNativeReflectConstruct","_isNativeReflectConstruct","_createSuperInternal","Super","_getPrototypeOf2","result","NewTarget","constructor","Reflect","construct","arguments","apply","_possibleConstructorReturn2","sham","Proxy","Boolean","valueOf","UIManagerAny","UIManager","customGHEventsConfigFabricAndroid","topOnGestureHandlerEvent","registrationName","topOnGestureHandlerStateChange","customGHEventsConfig","assign","onGestureHandlerEvent","onGestureHandlerStateChange","isFabric","Platform","OS","genericDirectEventTypes","UIManagerConstants","_UIManagerAny$getView","_UIManagerAny$getView2","getViewManagerConfig","_UIManagerAny$getCons","getConstants","_UIManagerAny$setJSRe","setJSResponder","oldSetJSResponder","_UIManagerAny$clearJS","clearJSResponder","oldClearJSResponder","tag","blockNativeResponder","RNGestureHandlerModule","handleSetJSResponder","handleClearJSResponder","allowTouches","DEV_ON_ANDROID","__DEV__","DeviceEventEmitter","addListener","hasUnresolvedRefs","props","extract","refs","Array","isArray","current","some","stateToPropMappings","_defineProperty3","State","UNDETERMINED","undefined","BEGAN","FAILED","CANCELLED","ACTIVE","END","UNRESOLVED_REFS_RETRY_LIMIT","createHandler","_ref","name","_ref$allowedProps","allowedProps","_ref$config","config","transformProps","_ref$customNativeProp","customNativeProps","Handler","_React$Component","_inherits2","_super","_this","_classCallCheck2","_defineProperty","_assertThisInitialized2","event","nativeEvent","handlerTag","onGestureEvent","_this$props$onGesture","_this$props","_this$props$onGesture2","_this$props2","onHandlerStateChange","_this$props$onHandler","_this$props3","state","stateEventName","eventHandler","_this$props$onGesture3","_this$props4","node","viewNode","child","Children","only","children","ref","newConfig","createGestureHandler","newViewTag","viewTag","attachGestureHandler","ActionType","JS_FUNCTION_OLD_API","propsRef","registerOldGestureHandler","onGestureStateChange","actionType","_this$props5","_this$props6","REANIMATED_WORKLET","NATIVE_ANIMATED_EVENT","scheduleFlushOperations","updateGestureHandler","getNextHandlerTag","createRef","isMountedRef","id","handlerIDToTag","Error","_createClass2","key","value","componentDidMount","_this2","inspectorToggleListener","setState","_","update","queueMicrotask","filterConfig","concat","_toConsumableArray2","findNodeHandle","componentDidUpdate","componentWillUnmount","_this$inspectorToggle","remove","dropGestureHandler","handlerID","remainingTries","_this3","deepEqual","setNativeProps","updates","mergedProps","render","_this$props$testID","context","isJestEnv","gestureEventHandler","_this$props7","gestureStateEventHandler","_this$props8","events","tagMessage","grandChildren","type","displayName","toArray","push","createElement","PressabilityDebugView","color","hitSlop","cloneElement","refHandler","collapsable","handlerType","testID","Component","GestureHandlerRootViewContext"],"sources":["D:\\Moco\\PartyPilot\\node_modules\\react-native-gesture-handler\\lib\\module\\handlers\\createHandler.tsx"],"sourcesContent":["import * as React from 'react';\nimport {\n  Platform,\n  UIManager,\n  DeviceEventEmitter,\n  EmitterSubscription,\n} from 'react-native';\n// @ts-ignore - it isn't typed by TS & don't have definitelyTyped types\nimport deepEqual from 'lodash/isEqual';\nimport RNGestureHandlerModule from '../RNGestureHandlerModule';\nimport type RNGestureHandlerModuleWeb from '../RNGestureHandlerModule.web';\nimport { State } from '../State';\nimport {\n  handlerIDToTag,\n  getNextHandlerTag,\n  registerOldGestureHandler,\n} from './handlersRegistry';\n\nimport {\n  BaseGestureHandlerProps,\n  filterConfig,\n  GestureEvent,\n  HandlerStateChangeEvent,\n  findNodeHandle,\n  scheduleFlushOperations,\n} from './gestureHandlerCommon';\nimport { ValueOf } from '../typeUtils';\nimport { isFabric, isJestEnv, tagMessage } from '../utils';\nimport { ActionType } from '../ActionType';\nimport { PressabilityDebugView } from './PressabilityDebugView';\nimport GestureHandlerRootViewContext from '../GestureHandlerRootViewContext';\n\nconst UIManagerAny = UIManager as any;\n\nconst customGHEventsConfigFabricAndroid = {\n  topOnGestureHandlerEvent: { registrationName: 'onGestureHandlerEvent' },\n  topOnGestureHandlerStateChange: {\n    registrationName: 'onGestureHandlerStateChange',\n  },\n};\n\nconst customGHEventsConfig = {\n  onGestureHandlerEvent: { registrationName: 'onGestureHandlerEvent' },\n  onGestureHandlerStateChange: {\n    registrationName: 'onGestureHandlerStateChange',\n  },\n\n  // When using React Native Gesture Handler for Animated.event with useNativeDriver: true\n  // on Android with Fabric enabled, the native part still sends the native events to JS\n  // but prefixed with \"top\". We cannot simply rename the events above so they are prefixed\n  // with \"top\" instead of \"on\" because in such case Animated.events would not be registered.\n  // That's why we need to register another pair of event names.\n  // The incoming events will be queued but never handled.\n  // Without this piece of code below, you'll get the following JS error:\n  // Unsupported top level event type \"topOnGestureHandlerEvent\" dispatched\n  ...(isFabric() &&\n    Platform.OS === 'android' &&\n    customGHEventsConfigFabricAndroid),\n};\n\n// Add gesture specific events to genericDirectEventTypes object exported from UIManager\n// native module.\n// Once new event types are registered with react it is possible to dispatch these\n// events to all kind of native views.\nUIManagerAny.genericDirectEventTypes = {\n  ...UIManagerAny.genericDirectEventTypes,\n  ...customGHEventsConfig,\n};\n// In newer versions of RN the `genericDirectEventTypes` is located in the object\n// returned by UIManager.getViewManagerConfig('getConstants') or in older RN UIManager.getConstants(), we need to add it there as well to make\n// it compatible with RN 61+\nconst UIManagerConstants =\n  UIManagerAny.getViewManagerConfig?.('getConstants') ??\n  UIManagerAny.getConstants?.();\n\nif (UIManagerConstants) {\n  UIManagerConstants.genericDirectEventTypes = {\n    ...UIManagerConstants.genericDirectEventTypes,\n    ...customGHEventsConfig,\n  };\n}\n\n// Wrap JS responder calls and notify gesture handler manager\nconst {\n  setJSResponder: oldSetJSResponder = () => {\n    //no operation\n  },\n  clearJSResponder: oldClearJSResponder = () => {\n    //no operation\n  },\n} = UIManagerAny;\nUIManagerAny.setJSResponder = (tag: number, blockNativeResponder: boolean) => {\n  RNGestureHandlerModule.handleSetJSResponder(tag, blockNativeResponder);\n  oldSetJSResponder(tag, blockNativeResponder);\n};\nUIManagerAny.clearJSResponder = () => {\n  RNGestureHandlerModule.handleClearJSResponder();\n  oldClearJSResponder();\n};\n\nlet allowTouches = true;\nconst DEV_ON_ANDROID = __DEV__ && Platform.OS === 'android';\n// Toggled inspector blocks touch events in order to allow inspecting on Android\n// This needs to be a global variable in order to set initial state for `allowTouches` property in Handler component\nif (DEV_ON_ANDROID) {\n  DeviceEventEmitter.addListener('toggleElementInspector', () => {\n    allowTouches = !allowTouches;\n  });\n}\n\ntype HandlerProps<T extends Record<string, unknown>> = Readonly<\n  React.PropsWithChildren<BaseGestureHandlerProps<T>>\n>;\nfunction hasUnresolvedRefs<T extends Record<string, unknown>>(\n  props: HandlerProps<T>\n) {\n  // TODO(TS) - add type for extract arg\n  const extract = (refs: any | any[]) => {\n    if (!Array.isArray(refs)) {\n      return refs && refs.current === null;\n    }\n    return refs.some((r) => r && r.current === null);\n  };\n  return extract(props['simultaneousHandlers']) || extract(props['waitFor']);\n}\n\nconst stateToPropMappings = {\n  [State.UNDETERMINED]: undefined,\n  [State.BEGAN]: 'onBegan',\n  [State.FAILED]: 'onFailed',\n  [State.CANCELLED]: 'onCancelled',\n  [State.ACTIVE]: 'onActivated',\n  [State.END]: 'onEnded',\n} as const;\n\ntype CreateHandlerArgs<HandlerPropsT extends Record<string, unknown>> =\n  Readonly<{\n    name: string;\n    allowedProps: Readonly<Extract<keyof HandlerPropsT, string>[]>;\n    config: Readonly<Record<string, unknown>>;\n    transformProps?: (props: HandlerPropsT) => HandlerPropsT;\n    customNativeProps?: Readonly<string[]>;\n  }>;\n\n// TODO(TS) fix event types\ntype InternalEventHandlers = {\n  onGestureHandlerEvent?: (event: any) => void;\n  onGestureHandlerStateChange?: (event: any) => void;\n};\n\nconst UNRESOLVED_REFS_RETRY_LIMIT = 1;\n\n// TODO(TS) - make sure that BaseGestureHandlerProps doesn't need other generic parameter to work with custom properties.\nexport default function createHandler<\n  T extends BaseGestureHandlerProps<U>,\n  U extends Record<string, unknown>\n>({\n  name,\n  allowedProps = [],\n  config = {},\n  transformProps,\n  customNativeProps = [],\n}: CreateHandlerArgs<T>): React.ComponentType<T & React.RefAttributes<any>> {\n  interface HandlerState {\n    allowTouches: boolean;\n  }\n  class Handler extends React.Component<\n    T & InternalEventHandlers,\n    HandlerState\n  > {\n    static displayName = name;\n    static contextType = GestureHandlerRootViewContext;\n\n    private handlerTag: number;\n    private config: Record<string, unknown>;\n    private propsRef: React.MutableRefObject<unknown>;\n    private isMountedRef: React.MutableRefObject<boolean | null>;\n    private viewNode: any;\n    private viewTag?: number;\n    private inspectorToggleListener?: EmitterSubscription;\n\n    constructor(props: T & InternalEventHandlers) {\n      super(props);\n      this.handlerTag = getNextHandlerTag();\n      this.config = {};\n      this.propsRef = React.createRef();\n      this.isMountedRef = React.createRef();\n      this.state = { allowTouches };\n      if (props.id) {\n        if (handlerIDToTag[props.id] !== undefined) {\n          throw new Error(`Handler with ID \"${props.id}\" already registered`);\n        }\n        handlerIDToTag[props.id] = this.handlerTag;\n      }\n    }\n\n    componentDidMount() {\n      const props: HandlerProps<U> = this.props;\n      this.isMountedRef.current = true;\n\n      if (DEV_ON_ANDROID) {\n        this.inspectorToggleListener = DeviceEventEmitter.addListener(\n          'toggleElementInspector',\n          () => {\n            this.setState((_) => ({ allowTouches }));\n            this.update(UNRESOLVED_REFS_RETRY_LIMIT);\n          }\n        );\n      }\n      if (hasUnresolvedRefs(props)) {\n        // If there are unresolved refs (e.g. \".current\" has not yet been set)\n        // passed as `simultaneousHandlers` or `waitFor`, we enqueue a call to\n        // _update method that will try to update native handler props using\n        // queueMicrotask. This makes it so update() function gets called after all\n        // react components are mounted and we expect the missing ref object to\n        // be resolved by then.\n        queueMicrotask(() => {\n          this.update(UNRESOLVED_REFS_RETRY_LIMIT);\n        });\n      }\n\n      this.createGestureHandler(\n        filterConfig(\n          transformProps ? transformProps(this.props) : this.props,\n          [...allowedProps, ...customNativeProps],\n          config\n        )\n      );\n\n      this.attachGestureHandler(findNodeHandle(this.viewNode) as number); // TODO(TS) - check if this can be null\n    }\n\n    componentDidUpdate() {\n      const viewTag = findNodeHandle(this.viewNode);\n      if (this.viewTag !== viewTag) {\n        this.attachGestureHandler(viewTag as number); // TODO(TS) - check interaction between _viewTag & findNodeHandle\n      }\n      this.update(UNRESOLVED_REFS_RETRY_LIMIT);\n    }\n\n    componentWillUnmount() {\n      this.inspectorToggleListener?.remove();\n      this.isMountedRef.current = false;\n      RNGestureHandlerModule.dropGestureHandler(this.handlerTag);\n      scheduleFlushOperations();\n      // We can't use this.props.id directly due to TS generic type narrowing bug, see https://github.com/microsoft/TypeScript/issues/13995 for more context\n      const handlerID: string | undefined = this.props.id;\n      if (handlerID) {\n        // eslint-disable-next-line @typescript-eslint/no-dynamic-delete\n        delete handlerIDToTag[handlerID];\n      }\n    }\n\n    private onGestureHandlerEvent = (event: GestureEvent<U>) => {\n      if (event.nativeEvent.handlerTag === this.handlerTag) {\n        if (typeof this.props.onGestureEvent === 'function') {\n          this.props.onGestureEvent?.(event);\n        }\n      } else {\n        this.props.onGestureHandlerEvent?.(event);\n      }\n    };\n\n    // TODO(TS) - make sure this is right type for event\n    private onGestureHandlerStateChange = (\n      event: HandlerStateChangeEvent<U>\n    ) => {\n      if (event.nativeEvent.handlerTag === this.handlerTag) {\n        if (typeof this.props.onHandlerStateChange === 'function') {\n          this.props.onHandlerStateChange?.(event);\n        }\n\n        const state: ValueOf<typeof State> = event.nativeEvent.state;\n        const stateEventName = stateToPropMappings[state];\n        const eventHandler = stateEventName && this.props[stateEventName];\n        if (eventHandler && typeof eventHandler === 'function') {\n          eventHandler(event);\n        }\n      } else {\n        this.props.onGestureHandlerStateChange?.(event);\n      }\n    };\n\n    private refHandler = (node: any) => {\n      this.viewNode = node;\n\n      const child = React.Children.only(this.props.children);\n      // TODO(TS) fix ref type\n      const { ref }: any = child;\n      if (ref !== null) {\n        if (typeof ref === 'function') {\n          ref(node);\n        } else {\n          ref.current = node;\n        }\n      }\n    };\n\n    private createGestureHandler = (\n      newConfig: Readonly<Record<string, unknown>>\n    ) => {\n      this.config = newConfig;\n\n      RNGestureHandlerModule.createGestureHandler(\n        name,\n        this.handlerTag,\n        newConfig\n      );\n    };\n\n    private attachGestureHandler = (newViewTag: number) => {\n      this.viewTag = newViewTag;\n\n      if (Platform.OS === 'web') {\n        // typecast due to dynamic resolution, attachGestureHandler should have web version signature in this branch\n        (\n          RNGestureHandlerModule.attachGestureHandler as typeof RNGestureHandlerModuleWeb.attachGestureHandler\n        )(\n          this.handlerTag,\n          newViewTag,\n          ActionType.JS_FUNCTION_OLD_API, // ignored on web\n          this.propsRef\n        );\n      } else {\n        registerOldGestureHandler(this.handlerTag, {\n          onGestureEvent: this.onGestureHandlerEvent,\n          onGestureStateChange: this.onGestureHandlerStateChange,\n        });\n\n        const actionType = (() => {\n          if (\n            this.props?.onGestureEvent &&\n            'current' in this.props.onGestureEvent\n          ) {\n            // Reanimated worklet\n            return ActionType.REANIMATED_WORKLET;\n          } else if (\n            this.props?.onGestureEvent &&\n            '__isNative' in this.props.onGestureEvent\n          ) {\n            // Animated.event with useNativeDriver: true\n            return ActionType.NATIVE_ANIMATED_EVENT;\n          } else {\n            // JS callback or Animated.event with useNativeDriver: false\n            return ActionType.JS_FUNCTION_OLD_API;\n          }\n        })();\n\n        RNGestureHandlerModule.attachGestureHandler(\n          this.handlerTag,\n          newViewTag,\n          actionType\n        );\n      }\n\n      scheduleFlushOperations();\n    };\n\n    private updateGestureHandler = (\n      newConfig: Readonly<Record<string, unknown>>\n    ) => {\n      this.config = newConfig;\n\n      RNGestureHandlerModule.updateGestureHandler(this.handlerTag, newConfig);\n      scheduleFlushOperations();\n    };\n\n    private update(remainingTries: number) {\n      if (!this.isMountedRef.current) {\n        return;\n      }\n\n      const props: HandlerProps<U> = this.props;\n\n      // When ref is set via a function i.e. `ref={(r) => refObject.current = r}` instead of\n      // `ref={refObject}` it's possible that it won't be resolved in time. Seems like trying\n      // again is easy enough fix.\n      if (hasUnresolvedRefs(props) && remainingTries > 0) {\n        queueMicrotask(() => {\n          this.update(remainingTries - 1);\n        });\n      } else {\n        const newConfig = filterConfig(\n          transformProps ? transformProps(this.props) : this.props,\n          [...allowedProps, ...customNativeProps],\n          config\n        );\n        if (!deepEqual(this.config, newConfig)) {\n          this.updateGestureHandler(newConfig);\n        }\n      }\n    }\n\n    setNativeProps(updates: any) {\n      const mergedProps = { ...this.props, ...updates };\n      const newConfig = filterConfig(\n        transformProps ? transformProps(mergedProps) : mergedProps,\n        [...allowedProps, ...customNativeProps],\n        config\n      );\n      this.updateGestureHandler(newConfig);\n    }\n\n    render() {\n      if (__DEV__ && !this.context && !isJestEnv() && Platform.OS !== 'web') {\n        throw new Error(\n          name +\n            ' must be used as a descendant of GestureHandlerRootView. Otherwise the gestures will not be recognized. See https://docs.swmansion.com/react-native-gesture-handler/docs/installation for more details.'\n        );\n      }\n\n      let gestureEventHandler = this.onGestureHandlerEvent;\n      // Another instance of https://github.com/microsoft/TypeScript/issues/13995\n      type OnGestureEventHandlers = {\n        onGestureEvent?: BaseGestureHandlerProps<U>['onGestureEvent'];\n        onGestureHandlerEvent?: InternalEventHandlers['onGestureHandlerEvent'];\n      };\n      const { onGestureEvent, onGestureHandlerEvent }: OnGestureEventHandlers =\n        this.props;\n      if (onGestureEvent && typeof onGestureEvent !== 'function') {\n        // If it's not a method it should be an native Animated.event\n        // object. We set it directly as the handler for the view\n        // In this case nested handlers are not going to be supported\n        if (onGestureHandlerEvent) {\n          throw new Error(\n            'Nesting touch handlers with native animated driver is not supported yet'\n          );\n        }\n        gestureEventHandler = onGestureEvent;\n      } else {\n        if (\n          onGestureHandlerEvent &&\n          typeof onGestureHandlerEvent !== 'function'\n        ) {\n          throw new Error(\n            'Nesting touch handlers with native animated driver is not supported yet'\n          );\n        }\n      }\n\n      let gestureStateEventHandler = this.onGestureHandlerStateChange;\n      // Another instance of https://github.com/microsoft/TypeScript/issues/13995\n      type OnGestureStateChangeHandlers = {\n        onHandlerStateChange?: BaseGestureHandlerProps<U>['onHandlerStateChange'];\n        onGestureHandlerStateChange?: InternalEventHandlers['onGestureHandlerStateChange'];\n      };\n      const {\n        onHandlerStateChange,\n        onGestureHandlerStateChange,\n      }: OnGestureStateChangeHandlers = this.props;\n      if (onHandlerStateChange && typeof onHandlerStateChange !== 'function') {\n        // If it's not a method it should be an native Animated.event\n        // object. We set it directly as the handler for the view\n        // In this case nested handlers are not going to be supported\n        if (onGestureHandlerStateChange) {\n          throw new Error(\n            'Nesting touch handlers with native animated driver is not supported yet'\n          );\n        }\n        gestureStateEventHandler = onHandlerStateChange;\n      } else {\n        if (\n          onGestureHandlerStateChange &&\n          typeof onGestureHandlerStateChange !== 'function'\n        ) {\n          throw new Error(\n            'Nesting touch handlers with native animated driver is not supported yet'\n          );\n        }\n      }\n      const events = {\n        onGestureHandlerEvent: this.state.allowTouches\n          ? gestureEventHandler\n          : undefined,\n        onGestureHandlerStateChange: this.state.allowTouches\n          ? gestureStateEventHandler\n          : undefined,\n      };\n\n      this.propsRef.current = events;\n\n      let child: any = null;\n      try {\n        child = React.Children.only(this.props.children);\n      } catch (e) {\n        throw new Error(\n          tagMessage(\n            `${name} got more than one view as a child. If you want the gesture to work on multiple views, wrap them with a common parent and attach the gesture to that view.`\n          )\n        );\n      }\n\n      let grandChildren = child.props.children;\n      if (\n        __DEV__ &&\n        child.type &&\n        (child.type === 'RNGestureHandlerButton' ||\n          child.type.name === 'View' ||\n          child.type.displayName === 'View')\n      ) {\n        grandChildren = React.Children.toArray(grandChildren);\n        grandChildren.push(\n          <PressabilityDebugView\n            key=\"pressabilityDebugView\"\n            color=\"mediumspringgreen\"\n            hitSlop={child.props.hitSlop}\n          />\n        );\n      }\n\n      return React.cloneElement(\n        child,\n        {\n          ref: this.refHandler,\n          collapsable: false,\n          ...(isJestEnv()\n            ? {\n                handlerType: name,\n                handlerTag: this.handlerTag,\n              }\n            : {}),\n          testID: this.props.testID ?? child.props.testID,\n          ...events,\n        },\n        grandChildren\n      );\n    }\n  }\n  return Handler;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}