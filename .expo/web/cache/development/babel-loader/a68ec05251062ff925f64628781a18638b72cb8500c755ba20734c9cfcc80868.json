{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { useState } from 'react';\nimport Text from \"react-native-web/dist/exports/Text\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport ImagePicker from 'react-native-image-picker';\nimport { Supabase } from \"../../config/supabaseConfig\";\nimport { COLORS } from \"../../constants\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default function ProfilPicture(_ref) {\n  var src = _ref.src,\n    dimension = _ref.dimension,\n    focused = _ref.focused;\n  var _useState = useState(src),\n    _useState2 = _slicedToArray(_useState, 2),\n    image = _useState2[0],\n    setImage = _useState2[1];\n  var styles = StyleSheet.create({\n    image: {\n      borderRadius: dimension / 2,\n      width: dimension,\n      height: dimension,\n      borderColor: COLORS.fontColour,\n      borderWidth: focused ? 1 : 0\n    }\n  });\n  var handleImagePicker = function handleImagePicker() {\n    var options = {\n      title: 'Select Profile Picture',\n      storageOptions: {\n        skipBackup: true,\n        path: 'images'\n      }\n    };\n    ImagePicker.showImagePicker(options, function (response) {\n      if (response.didCancel) {\n        console.log('User cancelled image picker');\n      } else if (response.error) {\n        console.log('ImagePicker Error: ', response.error);\n      } else if (response.customButton) {\n        console.log('User tapped custom button: ', response.customButton);\n      } else {\n        var fileData = {\n          uri: response.uri,\n          name: response.fileName || 'profile.jpg',\n          type: response.type || 'image/jpeg'\n        };\n        Supabase.storage.from('profile-pictures').upload(`user-${userId}`, fileData, {\n          contentType: fileData.type\n        }).then(function (response) {\n          if (response.error) {\n            console.error(response.error.message);\n          } else {\n            setImage(response.data.Key);\n          }\n        });\n      }\n    });\n  };\n  return _jsx(View, {\n    children: _jsx(TouchableOpacity, {\n      onPress: handleImagePicker,\n      children: _jsx(Image, {\n        source: {\n          uri: image\n        },\n        style: styles.image\n      })\n    })\n  });\n}","map":{"version":3,"names":["React","useState","Text","StyleSheet","View","Image","TouchableOpacity","ImagePicker","Supabase","COLORS","jsx","_jsx","ProfilPicture","_ref","src","dimension","focused","_useState","_useState2","_slicedToArray","image","setImage","styles","create","borderRadius","width","height","borderColor","fontColour","borderWidth","handleImagePicker","options","title","storageOptions","skipBackup","path","showImagePicker","response","didCancel","console","log","error","customButton","fileData","uri","name","fileName","type","storage","from","upload","userId","contentType","then","message","data","Key","children","onPress","source","style"],"sources":["D:/Moco/PartyPilot/src/components/ProfileImage/ProfileImage.jsx"],"sourcesContent":["import React, { useState } from 'react';\r\nimport { Text, StyleSheet, View, Image, TouchableOpacity } from 'react-native';\r\nimport ImagePicker from 'react-native-image-picker';\r\nimport { Supabase } from '../../config/supabaseConfig'; // Import your Supabase setup\r\nimport { COLORS } from '../../constants';\r\n\r\nexport default function ProfilPicture({ src, dimension, focused }) {\r\n  const [image, setImage] = useState(src);\r\n\r\n  const styles = StyleSheet.create({\r\n    image: {\r\n      borderRadius: dimension / 2,\r\n      width: dimension,\r\n      height: dimension,\r\n      borderColor: COLORS.fontColour,\r\n      borderWidth: focused ? 1 : 0,\r\n    },\r\n  });\r\n\r\n  const handleImagePicker = () => {\r\n    const options = {\r\n      title: 'Select Profile Picture',\r\n      storageOptions: {\r\n        skipBackup: true,\r\n        path: 'images',\r\n      },\r\n    };\r\n\r\n    ImagePicker.showImagePicker(options, (response) => {\r\n      if (response.didCancel) {\r\n        console.log('User cancelled image picker');\r\n      } else if (response.error) {\r\n        console.log('ImagePicker Error: ', response.error);\r\n      } else if (response.customButton) {\r\n        console.log('User tapped custom button: ', response.customButton);\r\n      } else {\r\n        // Upload the image to Supabase Storage\r\n        const fileData = {\r\n          uri: response.uri,\r\n          name: response.fileName || 'profile.jpg',\r\n          type: response.type || 'image/jpeg',\r\n        };\r\n\r\n        Supabase.storage\r\n          .from('profile-pictures')\r\n          .upload(`user-${userId}`, fileData, {\r\n            contentType: fileData.type,\r\n          })\r\n          .then((response) => {\r\n            if (response.error) {\r\n              console.error(response.error.message);\r\n            } else {\r\n              // Update the state with the new image URL\r\n              setImage(response.data.Key);\r\n            }\r\n          });\r\n      }\r\n    });\r\n  };\r\n\r\n  return (\r\n    <View>\r\n      <TouchableOpacity onPress={handleImagePicker}>\r\n        <Image source={{ uri: image }} style={styles.image} />\r\n      </TouchableOpacity>\r\n    </View>\r\n  );\r\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}