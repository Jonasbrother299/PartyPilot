{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = ProfilPictureUplaod;\nvar _asyncToGenerator2 = _interopRequireDefault(require(\"@babel/runtime/helpers/asyncToGenerator\"));\nvar _slicedToArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/slicedToArray\"));\nvar _Text = _interopRequireDefault(require(\"react-native-web/dist/exports/Text\"));\nvar _StyleSheet = _interopRequireDefault(require(\"react-native-web/dist/exports/StyleSheet\"));\nvar _View = _interopRequireDefault(require(\"react-native-web/dist/exports/View\"));\nvar _Image = _interopRequireDefault(require(\"react-native-web/dist/exports/Image\"));\nvar _Button = _interopRequireDefault(require(\"react-native-web/dist/exports/Button\"));\nvar _Alert = _interopRequireDefault(require(\"react-native-web/dist/exports/Alert\"));\nvar _TouchableOpacity = _interopRequireDefault(require(\"react-native-web/dist/exports/TouchableOpacity\"));\nvar _constants = require(\"../../constants\");\nvar _react = require(\"react\");\nvar _supabaseConfig = require(\"../../config/supabaseConfig\");\nvar ImagePicker = _interopRequireWildcard(require(\"expo-image-picker\"));\nvar FileSystem = _interopRequireWildcard(require(\"expo-file-system\"));\nvar _base64Arraybuffer = require(\"base64-arraybuffer\");\nvar _useSession2 = require(\"../../hooks/useSession\");\nvar _ProfileImage = _interopRequireDefault(require(\"./ProfileImage\"));\nvar _jsxRuntime = require(\"react/jsx-runtime\");\nvar _jsxFileName = \"D:\\\\Moco\\\\PartyPilot\\\\src\\\\components\\\\ProfileImage\\\\ProfilPictureUplaod.jsx\";\nfunction _getRequireWildcardCache(e) { if (\"function\" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }\nfunction _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || \"object\" != typeof e && \"function\" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if (\"default\" !== u && Object.prototype.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }\nfunction ProfilPictureUplaod(_ref) {\n  var dimension = _ref.dimension;\n  var _useSession = (0, _useSession2.useSession)(),\n    session = _useSession.session;\n  var _useState = (0, _react.useState)([]),\n    _useState2 = (0, _slicedToArray2.default)(_useState, 2),\n    files = _useState2[0],\n    setFiles = _useState2[1];\n  var _useState3 = (0, _react.useState)(null),\n    _useState4 = (0, _slicedToArray2.default)(_useState3, 2),\n    selectedImageUri = _useState4[0],\n    setSelectedImageUri = _useState4[1];\n  (0, _react.useEffect)(function () {\n    if (!session.user) return;\n    loadImage();\n  }, [session.user]);\n  function loadImage() {\n    return _loadImage.apply(this, arguments);\n  }\n  function _loadImage() {\n    _loadImage = (0, _asyncToGenerator2.default)(function* () {\n      try {\n        var _yield$supabase$from$ = yield _supabaseConfig.supabase.from('profiles').select('avatar_url').eq('id', session.user.id).single(),\n          data = _yield$supabase$from$.data,\n          error = _yield$supabase$from$.error;\n        if (error) {\n          throw error;\n        }\n        if (data && data.avatar_url) {\n          downloadImage(data.avatar_url);\n        }\n      } catch (error) {\n        console.error('Error loading image:', error.message);\n        _Alert.default.alert('Error', 'Failed to load image. Please try again.');\n      }\n    });\n    return _loadImage.apply(this, arguments);\n  }\n  function downloadImage(_x) {\n    return _downloadImage.apply(this, arguments);\n  }\n  function _downloadImage() {\n    _downloadImage = (0, _asyncToGenerator2.default)(function* (path) {\n      try {\n        var imageUrl = `${process.env.EXPO_PUBLIC_SUPABASE_URL}/storage/v1/object/public/avatars/${path}`;\n        setSelectedImageUri(imageUrl);\n      } catch (error) {\n        console.error('Error downloading image:', error.message);\n        _Alert.default.alert('Error', 'Failed to download image. Please try again.');\n      }\n    });\n    return _downloadImage.apply(this, arguments);\n  }\n  var styles = _StyleSheet.default.create({\n    container: {\n      flex: 1,\n      padding: 20\n    },\n    image: {\n      borderRadius: dimension / 2,\n      width: dimension,\n      height: dimension,\n      borderColor: _constants.COLORS.fontColour\n    },\n    text: {\n      fontSize: 20,\n      color: 'white'\n    }\n  });\n  function onSelectedImage() {\n    return _onSelectedImage.apply(this, arguments);\n  }\n  function _onSelectedImage() {\n    _onSelectedImage = (0, _asyncToGenerator2.default)(function* () {\n      try {\n        var _yield$ImagePicker$re = yield ImagePicker.requestMediaLibraryPermissionsAsync(),\n          status = _yield$ImagePicker$re.status;\n        if (status !== 'granted') {\n          throw new Error('Permission to access media library denied');\n        }\n        var result = yield ImagePicker.launchImageLibraryAsync({\n          mediaTypes: ImagePicker.MediaTypeOptions.Images,\n          allowsEditing: true,\n          aspect: [1, 1],\n          quality: 1\n        });\n        if (!result.canceled) {\n          yield removeAllImages();\n          var img = result.assets[0];\n          console.log(img.uri);\n          var base64 = yield FileSystem.readAsStringAsync(img.uri, {\n            encoding: 'base64'\n          });\n          var filePath = `${session.user.id}/${new Date().getTime()}.${img.type === 'image' ? 'png' : 'mp4'}`;\n          var contentType = img.type === 'image' ? 'image/png' : 'video/mp4';\n          yield _supabaseConfig.supabase.storage.from('avatars').upload(filePath, (0, _base64Arraybuffer.decode)(base64), {\n            contentType: contentType\n          });\n          var _yield$supabase$from$2 = yield _supabaseConfig.supabase.from('profiles').update({\n              avatar_url: filePath\n            }).eq('id', session.user.id),\n            profileError = _yield$supabase$from$2.error;\n          if (profileError) {\n            throw profileError;\n          }\n          loadImage();\n        }\n      } catch (error) {\n        console.error('ImagePicker Error:', error.message);\n        _Alert.default.alert('Error', 'Failed to load image. Please try again.');\n      }\n    });\n    return _onSelectedImage.apply(this, arguments);\n  }\n  function removeAllImages() {\n    return _removeAllImages.apply(this, arguments);\n  }\n  function _removeAllImages() {\n    _removeAllImages = (0, _asyncToGenerator2.default)(function* () {\n      try {\n        var _yield$supabase$stora = yield _supabaseConfig.supabase.storage.from('avatars').list(session.user.id),\n          _files = _yield$supabase$stora.data,\n          error = _yield$supabase$stora.error;\n        if (error) {\n          throw error;\n        }\n        yield Promise.all(_files.map(function () {\n          var _ref2 = (0, _asyncToGenerator2.default)(function* (file) {\n            yield _supabaseConfig.supabase.storage.from('avatars').remove([`${session.user.id}/${file.name}`]);\n          });\n          return function (_x2) {\n            return _ref2.apply(this, arguments);\n          };\n        }()));\n        console.log('All images removed successfully');\n      } catch (error) {\n        console.error('Error removing images:', error.message);\n        _Alert.default.alert('Error', 'Failed to remove existing images. Please try again.');\n      }\n    });\n    return _removeAllImages.apply(this, arguments);\n  }\n  return (0, _jsxRuntime.jsx)(_View.default, {\n    style: styles.container,\n    children: (0, _jsxRuntime.jsx)(_TouchableOpacity.default, {\n      onPress: onSelectedImage,\n      children: selectedImageUri ? (0, _jsxRuntime.jsx)(_Image.default, {\n        source: {\n          uri: selectedImageUri\n        },\n        style: styles.image\n      }, selectedImageUri) : (0, _jsxRuntime.jsx)(_Image.default, {\n        source: _constants.images.profile,\n        style: styles.image\n      }, _constants.images.profile)\n    })\n  });\n}","map":{"version":3,"names":["_constants","require","_react","_supabaseConfig","ImagePicker","_interopRequireWildcard","FileSystem","_base64Arraybuffer","_useSession2","_ProfileImage","_interopRequireDefault","_jsxRuntime","_jsxFileName","_getRequireWildcardCache","e","WeakMap","r","t","__esModule","default","has","get","n","__proto__","a","Object","defineProperty","getOwnPropertyDescriptor","u","prototype","hasOwnProperty","call","i","set","ProfilPictureUplaod","_ref","dimension","_useSession","useSession","session","_useState","useState","_useState2","_slicedToArray2","files","setFiles","_useState3","_useState4","selectedImageUri","setSelectedImageUri","useEffect","user","loadImage","_loadImage","apply","arguments","_asyncToGenerator2","_yield$supabase$from$","supabase","from","select","eq","id","single","data","error","avatar_url","downloadImage","console","message","Alert","alert","_x","_downloadImage","path","imageUrl","process","env","EXPO_PUBLIC_SUPABASE_URL","styles","StyleSheet","create","container","flex","padding","image","borderRadius","width","height","borderColor","COLORS","fontColour","text","fontSize","color","onSelectedImage","_onSelectedImage","_yield$ImagePicker$re","requestMediaLibraryPermissionsAsync","status","Error","result","launchImageLibraryAsync","mediaTypes","MediaTypeOptions","Images","allowsEditing","aspect","quality","canceled","removeAllImages","img","assets","log","uri","base64","readAsStringAsync","encoding","filePath","Date","getTime","type","contentType","storage","upload","decode","_yield$supabase$from$2","update","profileError","_removeAllImages","_yield$supabase$stora","list","Promise","all","map","_ref2","file","remove","name","_x2","jsx","_View","style","children","_TouchableOpacity","onPress","_Image","source","images","profile"],"sources":["D:/Moco/PartyPilot/src/components/ProfileImage/ProfilPictureUplaod.jsx"],"sourcesContent":["import { Text, StyleSheet, View, Image, Button, Alert, TouchableOpacity } from 'react-native';\r\nimport { COLORS, images } from '../../constants';\r\nimport { useState, useEffect } from 'react';\r\nimport { supabase } from '../../config/supabaseConfig';\r\nimport * as ImagePicker from 'expo-image-picker';\r\nimport * as FileSystem from 'expo-file-system';\r\nimport { decode } from 'base64-arraybuffer';\r\nimport { useSession } from '../../hooks/useSession';\r\nimport ProfileImage from './ProfileImage';\r\n\r\nexport default function ProfilPictureUplaod({ dimension }) {\r\n  const { session } = useSession();\r\n  const [files, setFiles] = useState([]);\r\n  const [selectedImageUri, setSelectedImageUri] = useState(null);\r\n\r\n  useEffect(() => {\r\n    if (!session.user) return;\r\n\r\n    loadImage();\r\n  }, [session.user]);\r\n \r\n  async function loadImage() {\r\n   try {\r\n    const { data, error } = await supabase\r\n      .from('profiles')\r\n      .select('avatar_url')\r\n      .eq('id', session.user.id)\r\n      .single();\r\n     \r\n    if (error) {\r\n      throw error;\r\n    }\r\n\r\n     if (data && data.avatar_url) {\r\n      downloadImage(data.avatar_url);\r\n    }\r\n  } catch (error) {\r\n    console.error('Error loading image:', error.message);\r\n    Alert.alert('Error', 'Failed to load image. Please try again.');\r\n  }\r\n  }\r\n\r\nasync function downloadImage(path) {\r\n try {\r\n    const imageUrl = `${process.env.EXPO_PUBLIC_SUPABASE_URL}/storage/v1/object/public/avatars/${path}`;\r\n    setSelectedImageUri(imageUrl);\r\n  } catch (error) {\r\n    console.error('Error downloading image:', error.message);\r\n    Alert.alert('Error', 'Failed to download image. Please try again.');\r\n  }\r\n  }\r\n  \r\n  const styles = StyleSheet.create({\r\n    container: {\r\n      flex: 1,\r\n      padding: 20,\r\n    },\r\n    image: {\r\n      borderRadius: dimension / 2,\r\n      width: dimension,\r\n      height: dimension,\r\n      borderColor: COLORS.fontColour,\r\n    },\r\n    text: {\r\n      fontSize: 20,\r\n      color: 'white',\r\n    },\r\n  });\r\n\r\n  async function onSelectedImage() {\r\n  try {\r\n    const { status } = await ImagePicker.requestMediaLibraryPermissionsAsync();\r\n\r\n    if (status !== 'granted') {\r\n      throw new Error('Permission to access media library denied');\r\n    }\r\n\r\n    // Let the user pick an image\r\n    const result = await ImagePicker.launchImageLibraryAsync({\r\n      mediaTypes: ImagePicker.MediaTypeOptions.Images,\r\n      allowsEditing: true,\r\n      aspect: [1, 1],\r\n      quality: 1,\r\n    });\r\n\r\n    if (!result.canceled) {\r\n      // If the user successfully selected an image, remove all existing images in the bucket\r\n      await removeAllImages();\r\n\r\n      const img = result.assets[0];\r\n       console.log(img.uri);\r\n      const base64 = await FileSystem.readAsStringAsync(img.uri, { encoding: 'base64' });\r\n      const filePath = `${session.user.id}/${new Date().getTime()}.${\r\n        img.type === 'image' ? 'png' : 'mp4'\r\n      }`;\r\n      const contentType = img.type === 'image' ? 'image/png' : 'video/mp4';\r\n      await supabase.storage.from('avatars').upload(filePath, decode(base64), { contentType });\r\n      \r\n       const { error: profileError } = await supabase\r\n        .from('profiles')\r\n        .update({ avatar_url: filePath })\r\n        .eq('id', session.user.id);\r\n\r\n\r\n      if (profileError) {\r\n        throw profileError;\r\n      }\r\n\r\n      loadImage();\r\n    }\r\n  } catch (error) {\r\n    console.error('ImagePicker Error:', error.message);\r\n    Alert.alert('Error', 'Failed to load image. Please try again.');\r\n  }\r\n  }\r\n  \r\n  async function removeAllImages() {\r\n  try {\r\n    // Fetch a list of all files in the bucket\r\n    const { data: files, error } = await supabase.storage\r\n      .from('avatars')\r\n      .list(session.user.id);\r\n\r\n    if (error) {\r\n      throw error;\r\n    }\r\n\r\n    // Delete each file in the bucket\r\n    await Promise.all(\r\n      files.map(async (file) => {\r\n        await supabase.storage.from('avatars').remove([`${session.user.id}/${file.name}`]);\r\n      })\r\n    );\r\n\r\n    console.log('All images removed successfully');\r\n  } catch (error) {\r\n    console.error('Error removing images:', error.message);\r\n    Alert.alert('Error', 'Failed to remove existing images. Please try again.');\r\n  }\r\n  }\r\n  \r\n  return (\r\n    <View style={styles.container}>\r\n      <TouchableOpacity onPress={onSelectedImage}>\r\n      {selectedImageUri ? (\r\n        <Image key={selectedImageUri} source={{ uri: selectedImageUri }} style={styles.image} />\r\n      ) : (\r\n        <Image key={images.profile} source={images.profile} style={styles.image} />\r\n        )}\r\n      </TouchableOpacity>\r\n    </View>\r\n  );\r\n}"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}