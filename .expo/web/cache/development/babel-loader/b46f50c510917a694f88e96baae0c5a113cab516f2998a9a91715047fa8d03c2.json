{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = RootNavigation;\nvar _slicedToArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/slicedToArray\"));\nrequire(\"react-native-url-polyfill/auto\");\nvar _react = require(\"react\");\nvar _supabaseConfig = require(\"../config/supabaseConfig\");\nvar _userStack = _interopRequireDefault(require(\"./userStack\"));\nvar _authStack = _interopRequireDefault(require(\"./authStack\"));\nvar _jsxRuntime = require(\"react/jsx-runtime\");\nvar _jsxFileName = \"D:\\\\Moco\\\\PartyPilot\\\\src\\\\navigation\\\\index.jsx\";\nfunction RootNavigation() {\n  var _useState = (0, _react.useState)(null),\n    _useState2 = (0, _slicedToArray2.default)(_useState, 2),\n    session = _useState2[0],\n    setSession = _useState2[1];\n  (0, _react.useEffect)(function () {\n    _supabaseConfig.supabase.auth.getSession().then(function (_ref) {\n      var session = _ref.data.session;\n      setSession(session);\n    });\n    {}\n    _supabaseConfig.supabase.auth.onAuthStateChange(function (_event, session) {\n      setSession(session);\n    });\n    return function () {\n      return _supabaseConfig.supabase.auth.removeAuthStateListener();\n    };\n  }, []);\n  return session && session.user ? (0, _jsxRuntime.jsx)(_userStack.default, {\n    session: session\n  }, session.user.id) : (0, _jsxRuntime.jsx)(_authStack.default, {});\n}","map":{"version":3,"names":["require","_react","_supabaseConfig","_userStack","_interopRequireDefault","_authStack","_jsxRuntime","_jsxFileName","RootNavigation","_useState","useState","_useState2","_slicedToArray2","default","session","setSession","useEffect","supabase","auth","getSession","then","_ref","data","onAuthStateChange","_event","removeAuthStateListener","user","jsx","id"],"sources":["D:/Moco/PartyPilot/src/navigation/index.jsx"],"sourcesContent":["import 'react-native-url-polyfill/auto'\r\nimport { useState, useEffect } from 'react'\r\nimport { supabase } from '../config/supabaseConfig'\r\n\r\nimport UserStack from './userStack';\r\nimport AuthStack from './authStack';\r\n\r\nexport default function RootNavigation() {\r\n  \r\n   const [session, setSession] = useState(null)\r\n\r\n  useEffect(() => {\r\n      // Checks if there is already a session\r\n      supabase.auth.getSession().then(({ data: { session } }) => {\r\n        setSession(session)\r\n      })\r\n    {/* Subscribe to auth state changes using onAuthStateChange\r\n        This subscription allows the component to react dynamically to login/logout events,\r\n        updating the local 'session' state with the latest authentication information.*/}\r\n      supabase.auth.onAuthStateChange((_event, session) => {\r\n        setSession(session)\r\n      })\r\n    \r\n    // Clean up the subscription when the component unmounts\r\n    return () => supabase.auth.removeAuthStateListener()\r\n    }, [])\r\n\r\n    // Conditional rendering based on the existence of a user session\r\n    return session && session.user ? <UserStack key={session.user.id} session={session} /> : <AuthStack />;     \r\n}"],"mappings":";;;;;;AAAAA,OAAA;AACA,IAAAC,MAAA,GAAAD,OAAA;AACA,IAAAE,eAAA,GAAAF,OAAA;AAEA,IAAAG,UAAA,GAAAC,sBAAA,CAAAJ,OAAA;AACA,IAAAK,UAAA,GAAAD,sBAAA,CAAAJ,OAAA;AAAoC,IAAAM,WAAA,GAAAN,OAAA;AAAA,IAAAO,YAAA;AAErB,SAASC,cAAcA,CAAA,EAAG;EAEtC,IAAAC,SAAA,GAA8B,IAAAC,eAAQ,EAAC,IAAI,CAAC;IAAAC,UAAA,OAAAC,eAAA,CAAAC,OAAA,EAAAJ,SAAA;IAArCK,OAAO,GAAAH,UAAA;IAAEI,UAAU,GAAAJ,UAAA;EAE3B,IAAAK,gBAAS,EAAC,YAAM;IAEZC,wBAAQ,CAACC,IAAI,CAACC,UAAU,CAAC,CAAC,CAACC,IAAI,CAAC,UAAAC,IAAA,EAA2B;MAAA,IAAhBP,OAAO,GAAAO,IAAA,CAAfC,IAAI,CAAIR,OAAO;MAChDC,UAAU,CAACD,OAAO,CAAC;IACrB,CAAC,CAAC;IACJ,CAEoF;IAClFG,wBAAQ,CAACC,IAAI,CAACK,iBAAiB,CAAC,UAACC,MAAM,EAAEV,OAAO,EAAK;MACnDC,UAAU,CAACD,OAAO,CAAC;IACrB,CAAC,CAAC;IAGJ,OAAO;MAAA,OAAMG,wBAAQ,CAACC,IAAI,CAACO,uBAAuB,CAAC,CAAC;IAAA;EACpD,CAAC,EAAE,EAAE,CAAC;EAGN,OAAOX,OAAO,IAAIA,OAAO,CAACY,IAAI,GAAG,IAAApB,WAAA,CAAAqB,GAAA,EAACxB,UAAA,CAAAU,OAAS;IAAuBC,OAAO,EAAEA;EAAQ,GAAlCA,OAAO,CAACY,IAAI,CAACE,EAAuB,CAAC,GAAG,IAAAtB,WAAA,CAAAqB,GAAA,EAACtB,UAAA,CAAAQ,OAAS,IAAE,CAAC;AAC1G"},"metadata":{},"sourceType":"script","externalDependencies":[]}