{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport 'react-native-url-polyfill/auto';\nimport { useState, useEffect } from 'react';\nimport { supabase } from \"../config/supabaseConfig\";\nimport UserStack from \"./userStack\";\nimport AuthStack from \"./authStack\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default function RootNavigation() {\n  var _useState = useState(null),\n    _useState2 = _slicedToArray(_useState, 2),\n    session = _useState2[0],\n    setSession = _useState2[1];\n  useEffect(function () {\n    supabase.auth.getSession().then(function (_ref) {\n      var session = _ref.data.session;\n      setSession(session);\n    });\n    {}\n    supabase.auth.onAuthStateChange(function (_event, session) {\n      setSession(session);\n    });\n    return function () {\n      return supabase.auth.removeAuthStateListener();\n    };\n  }, []);\n  return session && session.user ? _jsx(UserStack, {\n    session: session\n  }, session.user.id) : _jsx(AuthStack, {});\n}","map":{"version":3,"names":["useState","useEffect","supabase","UserStack","AuthStack","jsx","_jsx","RootNavigation","_useState","_useState2","_slicedToArray","session","setSession","auth","getSession","then","_ref","data","onAuthStateChange","_event","removeAuthStateListener","user","id"],"sources":["D:/Moco/PartyPilot/src/navigation/index.jsx"],"sourcesContent":["import 'react-native-url-polyfill/auto'\r\nimport { useState, useEffect } from 'react'\r\nimport { supabase } from '../config/supabaseConfig'\r\n\r\nimport UserStack from './userStack';\r\nimport AuthStack from './authStack';\r\n\r\nexport default function RootNavigation() {\r\n  \r\n   const [session, setSession] = useState(null)\r\n\r\n  useEffect(() => {\r\n      // Checks if there is already a session\r\n      supabase.auth.getSession().then(({ data: { session } }) => {\r\n        setSession(session)\r\n      })\r\n    {/* Subscribe to auth state changes using onAuthStateChange\r\n        This subscription allows the component to react dynamically to login/logout events,\r\n        updating the local 'session' state with the latest authentication information.*/}\r\n      supabase.auth.onAuthStateChange((_event, session) => {\r\n        setSession(session)\r\n      })\r\n    \r\n    // Clean up the subscription when the component unmounts\r\n    return () => supabase.auth.removeAuthStateListener()\r\n    }, [])\r\n\r\n    // Conditional rendering based on the existence of a user session\r\n    return session && session.user ? <UserStack key={session.user.id} session={session} /> : <AuthStack />;     \r\n}"],"mappings":";AAAA,OAAO,gCAAgC;AACvC,SAASA,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAC3C,SAASC,QAAQ;AAEjB,OAAOC,SAAS;AAChB,OAAOC,SAAS;AAAoB,SAAAC,GAAA,IAAAC,IAAA;AAEpC,eAAe,SAASC,cAAcA,CAAA,EAAG;EAEtC,IAAAC,SAAA,GAA8BR,QAAQ,CAAC,IAAI,CAAC;IAAAS,UAAA,GAAAC,cAAA,CAAAF,SAAA;IAArCG,OAAO,GAAAF,UAAA;IAAEG,UAAU,GAAAH,UAAA;EAE3BR,SAAS,CAAC,YAAM;IAEZC,QAAQ,CAACW,IAAI,CAACC,UAAU,CAAC,CAAC,CAACC,IAAI,CAAC,UAAAC,IAAA,EAA2B;MAAA,IAAhBL,OAAO,GAAAK,IAAA,CAAfC,IAAI,CAAIN,OAAO;MAChDC,UAAU,CAACD,OAAO,CAAC;IACrB,CAAC,CAAC;IACJ,CAEoF;IAClFT,QAAQ,CAACW,IAAI,CAACK,iBAAiB,CAAC,UAACC,MAAM,EAAER,OAAO,EAAK;MACnDC,UAAU,CAACD,OAAO,CAAC;IACrB,CAAC,CAAC;IAGJ,OAAO;MAAA,OAAMT,QAAQ,CAACW,IAAI,CAACO,uBAAuB,CAAC,CAAC;IAAA;EACpD,CAAC,EAAE,EAAE,CAAC;EAGN,OAAOT,OAAO,IAAIA,OAAO,CAACU,IAAI,GAAGf,IAAA,CAACH,SAAS;IAAuBQ,OAAO,EAAEA;EAAQ,GAAlCA,OAAO,CAACU,IAAI,CAACC,EAAuB,CAAC,GAAGhB,IAAA,CAACF,SAAS,IAAE,CAAC;AAC1G"},"metadata":{},"sourceType":"module","externalDependencies":[]}