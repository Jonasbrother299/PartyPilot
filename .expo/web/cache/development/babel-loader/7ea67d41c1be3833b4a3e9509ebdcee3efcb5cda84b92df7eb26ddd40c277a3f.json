{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { useState } from \"react\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport { supabase } from \"../../config/supabaseConfig\";\nimport { useNavigation } from \"@react-navigation/native\";\nimport * as Haptics from \"expo-haptics\";\nimport { LinearGradient } from \"expo-linear-gradient\";\nimport { COLORS, images } from \"../../constants\";\nimport CTAButton from \"../../components/Basics/CTAButton/CTAButton\";\nimport Logo from \"../../components/Basics/Image/Logo\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nexport default function Auth() {\n  var _useState = useState(\"\"),\n    _useState2 = _slicedToArray(_useState, 2),\n    email = _useState2[0],\n    setEmail = _useState2[1];\n  var _useState3 = useState(\"\"),\n    _useState4 = _slicedToArray(_useState3, 2),\n    password = _useState4[0],\n    setPassword = _useState4[1];\n  var _useState5 = useState(false),\n    _useState6 = _slicedToArray(_useState5, 2),\n    loading = _useState6[0],\n    setLoading = _useState6[1];\n  var _useState7 = useState(false),\n    _useState8 = _slicedToArray(_useState7, 2),\n    error = _useState8[0],\n    setError = _useState8[1];\n  var nav = useNavigation();\n  function signInWithEmail() {\n    return _signInWithEmail.apply(this, arguments);\n  }\n  function _signInWithEmail() {\n    _signInWithEmail = _asyncToGenerator(function* () {\n      setLoading(true);\n      var _yield$supabase$auth$ = yield supabase.auth.signInWithPassword({\n          email: email,\n          password: password\n        }),\n        error = _yield$supabase$auth$.error;\n      if (error) {\n        Haptics.notificationAsync(Haptics.NotificationFeedbackType.Error);\n        setError(true);\n      }\n      setLoading(false);\n      nav.navigate(\"Home\");\n    });\n    return _signInWithEmail.apply(this, arguments);\n  }\n  return _jsx(View, {\n    style: styles.container,\n    children: _jsx(LinearGradient, {\n      colors: [COLORS.heroColour, \"black\"],\n      style: styles.background,\n      children: _jsxs(View, {\n        style: styles.wrapper,\n        children: [_jsx(Logo, {\n          dimension: 150,\n          src: images.Logo\n        }), _jsxs(View, {\n          style: styles.mainContent,\n          children: [error ? _jsx(Text, {\n            style: styles.ErrorText,\n            children: \"Invalid credentials\"\n          }) : _jsx(_Fragment, {}), _jsx(TextInput, {\n            style: styles.loginTextField,\n            label: \"Email\",\n            placeholder: \"Email\",\n            placeholderTextColor: \"#80848A\",\n            value: email,\n            onChangeText: function onChangeText(text) {\n              setEmail(text);\n              setError(false);\n            },\n            autoCapitalize: \"none\",\n            inputMode: \"email\"\n          }), _jsx(TextInput, {\n            style: styles.loginTextField,\n            placeholder: \"Password\",\n            placeholderTextColor: \"#80848A\",\n            value: password,\n            onChangeText: function onChangeText(text) {\n              setPassword(text);\n              setError(false);\n            },\n            secureTextEntry: true\n          })]\n        }), _jsxs(View, {\n          style: styles.buttonContainer,\n          children: [_jsx(CTAButton, {\n            title: \"Login\",\n            onPress: signInWithEmail,\n            variant: \"primary\",\n            height: 50\n          }), _jsxs(Text, {\n            style: styles.textSignUp,\n            children: [\"Don't Have an account?\", \" \", _jsx(Text, {\n              onPress: function onPress() {\n                return nav.navigate(\"Register\");\n              },\n              children: \"Sign Up\"\n            })]\n          })]\n        })]\n      })\n    })\n  });\n}\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: \"center\",\n    justifyContent: \"center\"\n  },\n  background: {\n    position: \"absolute\",\n    left: 0,\n    right: 0,\n    top: 0,\n    height: \"100%\"\n  },\n  wrapper: {\n    flex: 1,\n    marginTop: 0,\n    padding: 40\n  },\n  loginTextField: {\n    borderBottomWidth: 1,\n    borderBottomColor: COLORS.accentColour1Orange,\n    height: 70,\n    fontSize: 30,\n    marginVertical: 10,\n    fontWeight: \"300\",\n    color: \"#F2BC00\"\n  },\n  buttonContainer: {\n    top: 40\n  },\n  textSignUp: {\n    marginTop: 20,\n    color: \"white\"\n  },\n  ErrorText: {\n    color: COLORS.danger\n  }\n});","map":{"version":3,"names":["React","useState","StyleSheet","View","Text","TextInput","supabase","useNavigation","Haptics","LinearGradient","COLORS","images","CTAButton","Logo","jsx","_jsx","Fragment","_Fragment","jsxs","_jsxs","Auth","_useState","_useState2","_slicedToArray","email","setEmail","_useState3","_useState4","password","setPassword","_useState5","_useState6","loading","setLoading","_useState7","_useState8","error","setError","nav","signInWithEmail","_signInWithEmail","apply","arguments","_asyncToGenerator","_yield$supabase$auth$","auth","signInWithPassword","notificationAsync","NotificationFeedbackType","Error","navigate","style","styles","container","children","colors","heroColour","background","wrapper","dimension","src","mainContent","ErrorText","loginTextField","label","placeholder","placeholderTextColor","value","onChangeText","text","autoCapitalize","inputMode","secureTextEntry","buttonContainer","title","onPress","variant","height","textSignUp","create","flex","alignItems","justifyContent","position","left","right","top","marginTop","padding","borderBottomWidth","borderBottomColor","accentColour1Orange","fontSize","marginVertical","fontWeight","color","danger"],"sources":["D:/Moco/PartyPilot/src/screens/auth/LoginScreen.jsx"],"sourcesContent":["import React, { useState } from \"react\";\r\nimport { StyleSheet, View, Text, TextInput } from \"react-native\";\r\nimport { supabase } from \"../../config/supabaseConfig\";\r\nimport { useNavigation } from \"@react-navigation/native\";\r\nimport * as Haptics from \"expo-haptics\";\r\n\r\nimport { LinearGradient } from \"expo-linear-gradient\";\r\nimport { COLORS, images } from \"../../constants\";\r\nimport CTAButton from \"../../components/Basics/CTAButton/CTAButton\";\r\nimport Logo from \"../../components/Basics/Image/Logo\";\r\n\r\nexport default function Auth() {\r\n  const [email, setEmail] = useState(\"\");\r\n  const [password, setPassword] = useState(\"\");\r\n  const [loading, setLoading] = useState(false);\r\n  const [error, setError] = useState(false);\r\n\r\n  const nav = useNavigation();\r\n\r\n  async function signInWithEmail() {\r\n    setLoading(true);\r\n    const { error } = await supabase.auth.signInWithPassword({\r\n      email: email,\r\n      password: password,\r\n    });\r\n\r\n    if (error) {\r\n      Haptics.notificationAsync(Haptics.NotificationFeedbackType.Error);\r\n      setError(true);\r\n    }\r\n    setLoading(false);\r\n    nav.navigate(\"Home\");\r\n  }\r\n\r\n  return (\r\n    <View style={styles.container}>\r\n      <LinearGradient\r\n        colors={[COLORS.heroColour, \"black\"]}\r\n        style={styles.background}\r\n      >\r\n        <View style={styles.wrapper}>\r\n          <Logo dimension={150} src={images.Logo} />\r\n          <View style={styles.mainContent}>\r\n            {error ? (\r\n              <Text style={styles.ErrorText}>Invalid credentials</Text>\r\n            ) : (\r\n              <></>\r\n            )}\r\n            <TextInput\r\n              style={styles.loginTextField}\r\n              label=\"Email\"\r\n              placeholder=\"Email\"\r\n              placeholderTextColor=\"#80848A\"\r\n              value={email}\r\n              onChangeText={(text) => {\r\n                setEmail(text);\r\n                setError(false);\r\n              }}\r\n              autoCapitalize=\"none\"\r\n              inputMode=\"email\"\r\n            />\r\n            <TextInput\r\n              style={styles.loginTextField}\r\n              placeholder=\"Password\"\r\n              placeholderTextColor=\"#80848A\"\r\n              value={password}\r\n              onChangeText={(text) => {\r\n                setPassword(text);\r\n                setError(false);\r\n              }}\r\n              secureTextEntry\r\n            />\r\n          </View>\r\n          <View style={styles.buttonContainer}>\r\n            <CTAButton\r\n              title=\"Login\"\r\n              onPress={signInWithEmail}\r\n              variant=\"primary\"\r\n              height={50}\r\n            />\r\n\r\n            <Text style={styles.textSignUp}>\r\n              Don't Have an account?{\" \"}\r\n              <Text onPress={() => nav.navigate(\"Register\")}>Sign Up</Text>\r\n            </Text>\r\n          </View>\r\n        </View>\r\n      </LinearGradient>\r\n    </View>\r\n  );\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n  container: {\r\n    flex: 1,\r\n    alignItems: \"center\",\r\n    justifyContent: \"center\",\r\n  },\r\n  background: {\r\n    position: \"absolute\",\r\n    left: 0,\r\n    right: 0,\r\n    top: 0,\r\n    height: \"100%\",\r\n  },\r\n  wrapper: {\r\n    flex: 1,\r\n    marginTop: 0,\r\n    padding: 40,\r\n  },\r\n  loginTextField: {\r\n    borderBottomWidth: 1,\r\n    borderBottomColor: COLORS.accentColour1Orange,\r\n    height: 70,\r\n    fontSize: 30,\r\n    marginVertical: 10,\r\n    fontWeight: \"300\",\r\n    color: \"#F2BC00\",\r\n  },\r\n  buttonContainer: {\r\n    top: 40,\r\n  },\r\n  textSignUp: {\r\n    marginTop: 20,\r\n    color: \"white\",\r\n  },\r\n  ErrorText: {\r\n    color: COLORS.danger,\r\n  },\r\n});\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}