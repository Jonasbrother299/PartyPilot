{"ast":null,"code":"","map":{"version":3,"names":[],"sources":["D:/Moco/PartyPilot/src/components/ProfileImage/ProfileImage.jsx"],"sourcesContent":["// import React, { useState, useEffect } from 'react';\r\n// import { View, Image, Button, Alert, StyleSheet } from 'react-native';\r\n// import * as ImagePicker from 'expo-image-picker';\r\n// import { supabase } from '../../config/supabaseConfig'; // Import your Supabase setup\r\n\r\n// export default function Avatar({ url, size = 150, onUpload }) {\r\n//   const [uploading, setUploading] = useState(false);\r\n//   const [avatarUrl, setAvatarUrl] = useState<string | null>(null);\r\n//   const avatarSize = { height: size, width: size };\r\n\r\n//   useEffect(() => {\r\n//     if (url) downloadImage(url);\r\n//   }, [url]);\r\n\r\n//   async function downloadImage(path) {\r\n//     try {\r\n//       const { data, error } = await supabase.storage.from('avatars').download(path);\r\n\r\n//       if (error) {\r\n//         throw error;\r\n//       }\r\n\r\n//       const fr = new FileReader();\r\n//       fr.readAsDataURL(data);\r\n//       fr.onload = () => {\r\n//         setAvatarUrl(fr.result);\r\n//       };\r\n//     } catch (error) {\r\n//       if (error instanceof Error) {\r\n//         console.log('Error downloading image: ', error.message);\r\n//       }\r\n//     }\r\n//   }\r\n\r\n//   async function uploadAvatar() {\r\n//     try {\r\n//       setUploading(true);\r\n\r\n//       const result = await ImagePicker.launchImageLibraryAsync({\r\n//         mediaTypes: ImagePicker.MediaTypeOptions.Images,\r\n//         allowsEditing: true,\r\n//         aspect: [1, 1],\r\n//         quality: 1,\r\n//       });\r\n\r\n//       if (result.cancelled) {\r\n//         console.warn('Image picker cancelled');\r\n//         return;\r\n//       }\r\n\r\n//       const { uri, type, name } = result;\r\n\r\n//       const formData = new FormData();\r\n//       formData.append('file', { uri, type, name });\r\n\r\n//       const fileExt = name.split('.').pop();\r\n//       const filePath = `${Math.random()}.${fileExt}`;\r\n\r\n//       const { error: uploadError } = await supabase.storage\r\n//         .from('avatars')\r\n//         .upload(filePath, formData);\r\n\r\n//       if (uploadError) {\r\n//         throw uploadError;\r\n//       }\r\n\r\n//       onUpload(filePath);\r\n//     } catch (error) {\r\n//       if (error instanceof Error) {\r\n//         Alert.alert(error.message);\r\n//       } else {\r\n//         throw error;\r\n//       }\r\n//     } finally {\r\n//       setUploading(false);\r\n//     }\r\n//   }\r\n\r\n//   return (\r\n//     <View>\r\n//       {avatarUrl ? (\r\n//         <Image\r\n//           source={{ uri: avatarUrl }}\r\n//           accessibilityLabel=\"Avatar\"\r\n//           style={[avatarSize, styles.avatar, styles.image]}\r\n//         />\r\n//       ) : (\r\n//         <View style={[avatarSize, styles.avatar, styles.noImage]} />\r\n//       )}\r\n//       <View>\r\n//         <Button\r\n//           title={uploading ? 'Uploading ...' : 'Upload'}\r\n//           onPress={uploadAvatar}\r\n//           disabled={uploading}\r\n//         />\r\n//       </View>\r\n//     </View>\r\n//   );\r\n// }\r\n\r\n// const styles = StyleSheet.create({\r\n//   avatar: {\r\n//     borderRadius: 5,\r\n//     overflow: 'hidden',\r\n//     maxWidth: '100%',\r\n//   },\r\n//   image: {\r\n//     objectFit: 'cover',\r\n//     paddingTop: 0,\r\n//   },\r\n//   noImage: {\r\n//     backgroundColor: '#333',\r\n//     borderWidth: 1,\r\n//     borderColor: 'rgb(200, 200, 200)',\r\n//     borderRadius: 5,\r\n//   },\r\n// });"],"mappings":""},"metadata":{},"sourceType":"script","externalDependencies":[]}