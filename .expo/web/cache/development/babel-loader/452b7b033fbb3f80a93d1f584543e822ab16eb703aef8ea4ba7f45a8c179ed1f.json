{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { useState } from 'react';\nimport Text from \"react-native-web/dist/exports/Text\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport * as ImagePicker from 'expo-image-picker';\nimport { supabase } from \"../../config/supabaseConfig\";\nimport { COLORS } from \"../../constants\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default function ProfilPicture(_ref) {\n  var src = _ref.src,\n    dimension = _ref.dimension,\n    focused = _ref.focused;\n  var _useState = useState(null),\n    _useState2 = _slicedToArray(_useState, 2),\n    image = _useState2[0],\n    setImage = _useState2[1];\n  var styles = StyleSheet.create({\n    image: {\n      borderRadius: dimension / 2,\n      width: dimension,\n      height: dimension,\n      borderColor: COLORS.fontColour,\n      borderWidth: focused ? 1 : 0\n    }\n  });\n  var handleImagePicker = function () {\n    var _ref2 = _asyncToGenerator(function* () {\n      var permissionResult = yield ImagePicker.requestMediaLibraryPermissionsAsync();\n      if (permissionResult.granted === false) {\n        console.log('Permission to access camera roll is required!');\n        return;\n      }\n      var pickerResult = yield ImagePicker.launchImageLibraryAsync({\n        mediaTypes: ImagePicker.MediaTypeOptions.Images,\n        allowsEditing: true,\n        aspect: [1, 1],\n        quality: 1\n      });\n      if (!pickerResult.cancelled) {\n        var fileData = {\n          uri: pickerResult.uri,\n          name: 'profile.jpg',\n          type: 'image/jpeg'\n        };\n        Supabase.storage.from('profile-pictures').upload(`user-${userId}`, fileData, {\n          contentType: fileData.type\n        }).then(function (response) {\n          if (response.error) {\n            console.error(response.error.message);\n          } else {\n            setImage(response.data.Key);\n          }\n        });\n      }\n    });\n    return function handleImagePicker() {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n  return _jsx(View, {\n    children: _jsx(TouchableOpacity, {\n      onPress: handleImagePicker,\n      children: image ? _jsx(Image, {\n        source: {\n          uri: image\n        },\n        style: styles.image\n      }) : _jsx(Text, {\n        children: \"Tap to upload profile picture\"\n      })\n    })\n  });\n}","map":{"version":3,"names":["React","useState","Text","StyleSheet","View","Image","TouchableOpacity","ImagePicker","supabase","COLORS","jsx","_jsx","ProfilPicture","_ref","src","dimension","focused","_useState","_useState2","_slicedToArray","image","setImage","styles","create","borderRadius","width","height","borderColor","fontColour","borderWidth","handleImagePicker","_ref2","_asyncToGenerator","permissionResult","requestMediaLibraryPermissionsAsync","granted","console","log","pickerResult","launchImageLibraryAsync","mediaTypes","MediaTypeOptions","Images","allowsEditing","aspect","quality","cancelled","fileData","uri","name","type","Supabase","storage","from","upload","userId","contentType","then","response","error","message","data","Key","apply","arguments","children","onPress","source","style"],"sources":["D:/Moco/PartyPilot/src/components/ProfileImage/ProfileImage.jsx"],"sourcesContent":["import React, { useState } from 'react';\r\nimport { Text, StyleSheet, View, Image, TouchableOpacity } from 'react-native';\r\nimport * as ImagePicker from 'expo-image-picker';\r\nimport { supabase } from '../../config/supabaseConfig'; \r\nimport { COLORS } from '../../constants';\r\n\r\nexport default function ProfilPicture({ src, dimension, focused }) {\r\n  const [image, setImage] = useState(null);\r\n\r\n  const styles = StyleSheet.create({\r\n    image: {\r\n      borderRadius: dimension / 2,\r\n      width: dimension,\r\n      height: dimension,\r\n      borderColor: COLORS.fontColour,\r\n      borderWidth: focused ? 1 : 0,\r\n    },\r\n  });\r\n\r\n  const handleImagePicker = async () => {\r\n    const permissionResult = await ImagePicker.requestMediaLibraryPermissionsAsync();\r\n\r\n    if (permissionResult.granted === false) {\r\n      console.log('Permission to access camera roll is required!');\r\n      return;\r\n    }\r\n\r\n    const pickerResult = await ImagePicker.launchImageLibraryAsync({\r\n      mediaTypes: ImagePicker.MediaTypeOptions.Images,\r\n      allowsEditing: true,\r\n      aspect: [1, 1],\r\n      quality: 1,\r\n    });\r\n\r\n    if (!pickerResult.cancelled) {\r\n      // Upload the image to Supabase Storage\r\n      const fileData = {\r\n        uri: pickerResult.uri,\r\n        name: 'profile.jpg', // You can customize the filename\r\n        type: 'image/jpeg',\r\n      };\r\n\r\n      Supabase.storage\r\n        .from('profile-pictures')\r\n        .upload(`user-${userId}`, fileData, {\r\n          contentType: fileData.type,\r\n        })\r\n        .then((response) => {\r\n          if (response.error) {\r\n            console.error(response.error.message);\r\n          } else {\r\n            // Update the state with the new image URL\r\n            setImage(response.data.Key);\r\n          }\r\n        });\r\n    }\r\n  };\r\n\r\n  return (\r\n    <View>\r\n      <TouchableOpacity onPress={handleImagePicker}>\r\n        {image ? (\r\n          <Image source={{ uri: image }} style={styles.image} />\r\n        ) : (\r\n          <Text>Tap to upload profile picture</Text>\r\n        )}\r\n      </TouchableOpacity>\r\n    </View>\r\n  );\r\n}"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AAAC,OAAAC,IAAA;AAAA,OAAAC,UAAA;AAAA,OAAAC,IAAA;AAAA,OAAAC,KAAA;AAAA,OAAAC,gBAAA;AAExC,OAAO,KAAKC,WAAW,MAAM,mBAAmB;AAChD,SAASC,QAAQ;AACjB,SAASC,MAAM;AAA0B,SAAAC,GAAA,IAAAC,IAAA;AAEzC,eAAe,SAASC,aAAaA,CAAAC,IAAA,EAA8B;EAAA,IAA3BC,GAAG,GAAAD,IAAA,CAAHC,GAAG;IAAEC,SAAS,GAAAF,IAAA,CAATE,SAAS;IAAEC,OAAO,GAAAH,IAAA,CAAPG,OAAO;EAC7D,IAAAC,SAAA,GAA0BhB,QAAQ,CAAC,IAAI,CAAC;IAAAiB,UAAA,GAAAC,cAAA,CAAAF,SAAA;IAAjCG,KAAK,GAAAF,UAAA;IAAEG,QAAQ,GAAAH,UAAA;EAEtB,IAAMI,MAAM,GAAGnB,UAAU,CAACoB,MAAM,CAAC;IAC/BH,KAAK,EAAE;MACLI,YAAY,EAAET,SAAS,GAAG,CAAC;MAC3BU,KAAK,EAAEV,SAAS;MAChBW,MAAM,EAAEX,SAAS;MACjBY,WAAW,EAAElB,MAAM,CAACmB,UAAU;MAC9BC,WAAW,EAAEb,OAAO,GAAG,CAAC,GAAG;IAC7B;EACF,CAAC,CAAC;EAEF,IAAMc,iBAAiB;IAAA,IAAAC,KAAA,GAAAC,iBAAA,CAAG,aAAY;MACpC,IAAMC,gBAAgB,SAAS1B,WAAW,CAAC2B,mCAAmC,CAAC,CAAC;MAEhF,IAAID,gBAAgB,CAACE,OAAO,KAAK,KAAK,EAAE;QACtCC,OAAO,CAACC,GAAG,CAAC,+CAA+C,CAAC;QAC5D;MACF;MAEA,IAAMC,YAAY,SAAS/B,WAAW,CAACgC,uBAAuB,CAAC;QAC7DC,UAAU,EAAEjC,WAAW,CAACkC,gBAAgB,CAACC,MAAM;QAC/CC,aAAa,EAAE,IAAI;QACnBC,MAAM,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC;QACdC,OAAO,EAAE;MACX,CAAC,CAAC;MAEF,IAAI,CAACP,YAAY,CAACQ,SAAS,EAAE;QAE3B,IAAMC,QAAQ,GAAG;UACfC,GAAG,EAAEV,YAAY,CAACU,GAAG;UACrBC,IAAI,EAAE,aAAa;UACnBC,IAAI,EAAE;QACR,CAAC;QAEDC,QAAQ,CAACC,OAAO,CACbC,IAAI,CAAC,kBAAkB,CAAC,CACxBC,MAAM,CAAE,QAAOC,MAAO,EAAC,EAAER,QAAQ,EAAE;UAClCS,WAAW,EAAET,QAAQ,CAACG;QACxB,CAAC,CAAC,CACDO,IAAI,CAAC,UAACC,QAAQ,EAAK;UAClB,IAAIA,QAAQ,CAACC,KAAK,EAAE;YAClBvB,OAAO,CAACuB,KAAK,CAACD,QAAQ,CAACC,KAAK,CAACC,OAAO,CAAC;UACvC,CAAC,MAAM;YAELvC,QAAQ,CAACqC,QAAQ,CAACG,IAAI,CAACC,GAAG,CAAC;UAC7B;QACF,CAAC,CAAC;MACN;IACF,CAAC;IAAA,gBArCKhC,iBAAiBA,CAAA;MAAA,OAAAC,KAAA,CAAAgC,KAAA,OAAAC,SAAA;IAAA;EAAA,GAqCtB;EAED,OACErD,IAAA,CAACP,IAAI;IAAA6D,QAAA,EACHtD,IAAA,CAACL,gBAAgB;MAAC4D,OAAO,EAAEpC,iBAAkB;MAAAmC,QAAA,EAC1C7C,KAAK,GACJT,IAAA,CAACN,KAAK;QAAC8D,MAAM,EAAE;UAAEnB,GAAG,EAAE5B;QAAM,CAAE;QAACgD,KAAK,EAAE9C,MAAM,CAACF;MAAM,CAAE,CAAC,GAEtDT,IAAA,CAACT,IAAI;QAAA+D,QAAA,EAAC;MAA6B,CAAM;IAC1C,CACe;EAAC,CACf,CAAC;AAEX"},"metadata":{},"sourceType":"module","externalDependencies":[]}